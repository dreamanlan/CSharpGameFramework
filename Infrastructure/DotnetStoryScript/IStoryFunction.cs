using System;
using System.Collections.Generic;
using ScriptableFramework;

namespace DotnetStoryScript
{
    /// <summary>
    /// Describes the values used in plot commands. This interface is used to support parameters, local variables,
    /// global variables and built-in functions (returning the values used in a plot command).
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public interface IStoryFunction<T>
    {
        void InitFromDsl(Dsl.ISyntaxComponent param);//Initialize value instance from DSL language
        IStoryFunction<T> Clone();//Clone a new instance. Each value is initialized only once from the DSL language.
                                  //Subsequent instances are generated by cloning to improve performance.
        void Evaluate(StoryInstance instance, StoryMessageHandler handler, BoxedValue iterator, BoxedValueList args);//Parameters are replaced with parameter
                                                                                                                     //values and the value of StoryValue is calculated
        bool HaveValue { get; }//Whether there is already a value, the value is generated after initialization for constants, and the value is generated
                               //after Evaluate for parameters, variables and functions.
        T Value { get; }//return value
    }
    public interface IStoryFunction
    {
        void InitFromDsl(Dsl.ISyntaxComponent param);//Initialize value instance from DSL language
        IStoryFunction Clone();//Clone a new instance. Each value is initialized only once from the DSL language.
                               //Subsequent instances are generated by cloning to improve performance.
        void Evaluate(StoryInstance instance, StoryMessageHandler handler, BoxedValue iterator, BoxedValueList args);//Parameters are replaced with parameter
                                                                                                                     //values and the value of StoryValue is calculated
        bool HaveValue { get; }//Whether there is already a value, the value is generated after initialization for constants, and the value is generated
                               //after Evaluate for parameters, variables and functions.
        BoxedValue Value { get; }//return value
    }
    public class StoryArgValue : IStoryFunction
    {
        public const int c_NotArg = -1;
        public const int c_Iterator = -2;
        public void InitFromDsl(Dsl.ISyntaxComponent param)
        {}
        public IStoryFunction Clone()
        {
            var obj = NewValueObject();
            obj.CopyFrom(this);
            return obj;
        }
        public void Evaluate(StoryInstance instance, StoryMessageHandler handler, BoxedValue iterator, BoxedValueList args)
        {
            if (m_ArgIndex >= 0 && m_ArgIndex < args.Count) {
                m_Value = args[m_ArgIndex];
                m_HaveValue = true;
            }
            else if (m_ArgIndex == c_Iterator) {
                m_Value = iterator;
                m_HaveValue = true;
            }
            else {
                m_Value.SetNullObject();
                m_HaveValue = true;
            }
        }
        public bool HaveValue
        {
            get {
                return m_HaveValue;
            }
        }
        public BoxedValue Value
        {
            get {
                return m_Value;
            }
        }

        internal void SetArgument(int index)
        {
            m_HaveValue = false;
            m_ArgIndex = index;
            m_Value = BoxedValue.NullObject;
        }

        private StoryArgValue NewValueObject()
        {
            StoryArgValue obj = new StoryArgValue();
            return obj;
        }
        private void CopyFrom(StoryArgValue other)
        {
            m_ArgIndex = other.m_ArgIndex;
            m_Value = other.m_Value;
            m_HaveValue = other.m_HaveValue;
        }

        private int m_ArgIndex = c_NotArg;
        private BoxedValue m_Value;
        private bool m_HaveValue = false;
    }
    public class StoryVarValue : IStoryFunction
    {
        public void InitFromDsl(Dsl.ISyntaxComponent param)
        {}
        public IStoryFunction Clone()
        {
            var obj = NewValueObject();
            obj.CopyFrom(this);
            return obj;
        }
        public void Evaluate(StoryInstance instance, StoryMessageHandler handler, BoxedValue iterator, BoxedValueList args)
        {
            string name = m_VariableName;
            if (!string.IsNullOrEmpty(name)) {
                m_HaveValue = instance.TryGetVariable(name, out m_Value);
            }
            else {
                m_Value.SetNullObject();
                m_HaveValue = true;
            }
        }
        public bool HaveValue
        {
            get {
                return m_HaveValue;
            }
        }
        public BoxedValue Value
        {
            get {
                return m_Value;
            }
        }

        internal void SetVariable(string name)
        {
            m_HaveValue = false;
            m_VariableName = name;
            m_Value = BoxedValue.NullObject;
        }

        private StoryVarValue NewValueObject()
        {
            StoryVarValue obj = new StoryVarValue();
            return obj;
        }
        private void CopyFrom(StoryVarValue other)
        {
            m_VariableName = other.m_VariableName;
            m_Value = other.m_Value;
            m_HaveValue = other.m_HaveValue;
        }

        private string m_VariableName = null;
        private BoxedValue m_Value;
        private bool m_HaveValue = false;
    }
    public class StoryConstValue : IStoryFunction
    {
        public void InitFromDsl(Dsl.ISyntaxComponent param)
        {}
        public IStoryFunction Clone()
        {
            var obj = NewValueObject();
            obj.CopyFrom(this);
            return obj;
        }
        public void Evaluate(StoryInstance instance, StoryMessageHandler handler, BoxedValue iterator, BoxedValueList args)
        {}
        public bool HaveValue
        {
            get {
                return m_HaveValue;
            }
        }
        public BoxedValue Value
        {
            get {
                return m_Value;
            }
        }

        internal void SetValue<T>(T val)
        {
            m_HaveValue = true;
            m_Value.GenericSet<T>(val);
        }
        internal void SetValue(BoxedValue val)
        {
            m_HaveValue = true;
            m_Value = val;
        }

        protected virtual StoryConstValue NewValueObject()
        {
            StoryConstValue obj = new StoryConstValue();
            return obj;
        }
        private void CopyFrom(StoryConstValue other)
        {
            m_Value = other.m_Value;
            m_HaveValue = other.m_HaveValue;
        }

        private BoxedValue m_Value;
        private bool m_HaveValue = false;
    }
    public class StoryValue : IStoryFunction
    {
        public void InitFromDsl(Dsl.ISyntaxComponent param)
        {
            Dsl.ValueData valueData = param as Dsl.ValueData;
            if (null != valueData) {
                string id = param.GetId();
                int idType = param.GetIdType();
                if (idType == Dsl.ValueData.ID_TOKEN && id.StartsWith("$")) {
                    if (0 == id.CompareTo("$$")) {
                        SetArgument(StoryArgValue.c_Iterator);
                    }
                    else {
                        string idName = id.Substring(1);
                        if (idName.Length > 0 && char.IsDigit(idName[0])) {
                            SetArgument(int.Parse(idName));
                        }
                        else {
                            SetVariable(id);
                        }
                    }
                }
                else if (idType == Dsl.ValueData.ID_TOKEN && id.StartsWith("@")) {
                    SetVariable(id);
                }
                else {
                    CalcInitValue(param);
                }
            }
            else {
                CalcInitValue(param);
            }
        }
        public IStoryFunction Clone()
        {
            var obj = NewValueObject();
            obj.CopyFrom(this);
            return obj;
        }
        public void Evaluate(StoryInstance instance, StoryMessageHandler handler, BoxedValue iterator, BoxedValueList args)
        {
            if (null != m_Proxy) {
                m_Proxy.Evaluate(instance, handler, iterator, args);
            }
        }
        public bool HaveValue
        {
            get {
                return null == m_Proxy ? true : m_Proxy.HaveValue;
            }
        }
        public BoxedValue Value
        {
            get {
                return null == m_Proxy ? BoxedValue.NullObject : m_Proxy.Value;
            }
        }

        private StoryValue NewValueObject()
        {
            StoryValue obj = new StoryValue();
            return obj;
        }
        private void CopyFrom(StoryValue other)
        {
            if (null != other.m_Proxy) {
                m_Proxy = other.m_Proxy.Clone();
            }
        }
        private void SetArgument(int index)
        {
            StoryArgValue proxy = new StoryArgValue();
            proxy.SetArgument(index);
            m_Proxy = proxy;
        }
        private void SetVariable(string name)
        {
            StoryVarValue proxy = new StoryVarValue();
            proxy.SetVariable(name);
            m_Proxy = proxy;
        }
        private void SetProxy(IStoryFunction proxy)
        {
            m_Proxy = proxy;
        }
        private void SetValue<T>(T val)
        {
            StoryConstValue proxy = new StoryConstValue();
            proxy.SetValue(val);
            m_Proxy = proxy;
        }
        private void SetValue(BoxedValue val)
        {
            StoryConstValue proxy = new StoryConstValue();
            proxy.SetValue(val);
            m_Proxy = proxy;
        }
        private void CalcInitValue(Dsl.ISyntaxComponent param)
        {
            IStoryFunction val = StoryFunctionManager.Instance.CreateFunction(param);
            if (null != val) {
                //For functions whose values can be obtained upon initialization, there is no need to record function expressions and are directly converted into constant values.
                if (val.HaveValue) {
                    SetValue(val.Value);
                }
                else {
                    SetProxy(val);
                }
            }
            else if (param is Dsl.ValueData) {
                string id = param.GetId();
                int idType = param.GetIdType();
                if (idType == Dsl.ValueData.NUM_TOKEN) {
                    ScriptableFramework.Converter.TryParseNumeric(id, out var v);
                    SetValue(v);
                }
                else {
                    if (idType == Dsl.ValueData.ID_TOKEN) {
                        if (ScriptableFramework.Converter.TryParseBool(id, out var v)) {
                            SetValue(v);
                        }
                        else {
                            SetValue(id);
                        }
                    }
                    else {
                        SetValue(id);
                    }
                }
            }
            else {
#if DEBUG
                string err = string.Format("Unknown value, id:{0} line:{1}", param.GetId(), param.GetLine());
                throw new Exception(err);
#else
        		LogSystem.Error("Unknown value, id:{0}", param.GetId());
#endif
            }
        }

        private IStoryFunction m_Proxy = null;
    }
    public class StoryValue<T> : IStoryFunction<T>
    {
        public void InitFromDsl(Dsl.ISyntaxComponent param)
        {
            if (IsDslSyntax) {
                CalcInitValue(param);
            }
            else {
                Dsl.ValueData valueData = param as Dsl.ValueData;
                if (null != valueData) {
                    string id = param.GetId();
                    int idType = param.GetIdType();
                    if (idType == Dsl.ValueData.ID_TOKEN && id.StartsWith("$")) {
                        if (0 == id.CompareTo("$$")) {
                            SetArgument(StoryArgValue.c_Iterator);
                        }
                        else {
                            string idName = id.Substring(1);
                            if (idName.Length > 0 && char.IsDigit(idName[0])) {
                                SetArgument(int.Parse(id.Substring(1)));
                            }
                            else {
                                SetVariable(id);
                            }
                        }
                    }
                    else if (idType == Dsl.ValueData.ID_TOKEN && id.StartsWith("@")) {
                        SetVariable(id);
                    }
                    else {
                        CalcInitValue(param);
                    }
                }
                else {
                    CalcInitValue(param);
                }
            }
        }
        public IStoryFunction<T> Clone()
        {
            var obj = NewValueObject();
            obj.CopyFrom(this);
            return obj;
        }
        public void Evaluate(StoryInstance instance, StoryMessageHandler handler, BoxedValue iterator, BoxedValueList args)
        {
            if (null != m_Proxy) {
                m_Proxy.Evaluate(instance, handler, iterator, args);
            }
        }
        public bool HaveValue
        {
            get {
                return null == m_Proxy ? true : m_Proxy.HaveValue;
            }
        }
        public T Value
        {
            get {
                return null == m_Proxy ? default(T) : m_Proxy.Value.CastTo<T>();
            }
        }

        private StoryValue<T> NewValueObject()
        {
            StoryValue<T> obj = new StoryValue<T>();
            return obj;
        }
        private void CopyFrom(StoryValue<T> other)
        {
            if (null != other.m_Proxy) {
                m_Proxy = other.m_Proxy.Clone();
            }
        }
        private void SetArgument(int index)
        {
            StoryArgValue proxy = new StoryArgValue();
            proxy.SetArgument(index);
            m_Proxy = proxy;
        }
        private void SetVariable(string name)
        {
            StoryVarValue proxy = new StoryVarValue();
            proxy.SetVariable(name);
            m_Proxy = proxy;
        }
        private void SetProxy(IStoryFunction proxy)
        {
            m_Proxy = proxy;
        }
        private void SetValue(T val)
        {
            StoryConstValue proxy = new StoryConstValue();
            proxy.SetValue(val);
            m_Proxy = proxy;
        }
        private void SetValue(BoxedValue val)
        {
            StoryConstValue proxy = new StoryConstValue();
            proxy.SetValue(val);
            m_Proxy = proxy;
        }
        private void CalcInitValue(Dsl.ISyntaxComponent param)
        {
            if (IsDslSyntax) {
                if (typeof(T) == typeof(BoxedValue)) {
                    SetValue(BoxedValue.FromObject(param));
                }
                else {
                    SetValue((T)param);
                }
            }
            else {
                IStoryFunction val = StoryFunctionManager.Instance.CreateFunction(param);
                if (null != val) {
                    //For functions whose values can be obtained upon initialization, there is no need to record function expressions and are directly converted into constant values.
                    if (val.HaveValue) {
                        SetValue(val.Value.CastTo<T>());
                    }
                    else {
                        SetProxy(val);
                    }
                }
                else if (param is Dsl.ValueData) {
                    string id = param.GetId();
                    int idType = param.GetIdType();
                    if (idType == Dsl.ValueData.NUM_TOKEN) {
                        if (id.StartsWith("0x"))
                            SetValue(StoryValueHelper.CastTo<T>(uint.Parse(id.Substring(2), System.Globalization.NumberStyles.HexNumber)));
                        else if (id.IndexOf('.') >= 0 || id.IndexOf('e') > 0 || id.IndexOf('E') > 0)
                            SetValue(StoryValueHelper.CastTo<T>(float.Parse(id, System.Globalization.NumberStyles.Float)));
                        else
                            SetValue(StoryValueHelper.CastTo<T>(int.Parse(id, System.Globalization.NumberStyles.Integer)));
                    }
                    else if (idType == Dsl.ValueData.ID_TOKEN && (id == "true" || id == "false")) {
                        SetValue(StoryValueHelper.CastTo<T>(id == "true"));
                    }
                    else {
                        SetValue(StoryValueHelper.CastTo<T>(id));
                    }
                }
                else {
#if DEBUG
                    string err = string.Format("Unknown value, id:{0} line:{1}", param.GetId(), param.GetLine());
                    throw new Exception(err);
#else
        			LogSystem.Error("Unknown value, id:{0}", param.GetId());
#endif
                }
            }
        }

        private IStoryFunction m_Proxy = null;

        private static bool IsDslSyntax
        {
            get {
                if (!m_DslSyntaxInited) {
                    m_DslSyntaxInited = true;

                    m_IsDslSyntax = typeof(Dsl.ISyntaxComponent).IsAssignableFrom(typeof(T));
                }
                return m_IsDslSyntax;
            }
        }
        private static bool m_DslSyntaxInited = false;
        private static bool m_IsDslSyntax = false;
    }
}
