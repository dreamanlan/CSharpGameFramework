require "cs2lua__namespaces"; 

AiDoNormal = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		local __cs2dsl_newobj;
		__cs2dsl_newobj = newobject(AiDoNormal, nil, nil, "ctor", 0, nil, ...);
		return __cs2dsl_newobj;
	end,

	cctor = function()
		AiDoNormal.__cctor();
	end,

	__cctor = function()
		if AiDoNormal.__cctor_called then 
			return;
		else
			AiDoNormal.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	c_IntervalTime = 200,
	__cctor_called = false,

	-------------------------------
	------ instance methods -------
	-------------------------------
	Clone = function(this)
		local __method_ret_13_4_16_5;
		__method_ret_13_4_16_5 = newobject(AiDoNormal, nil, nil, "ctor", 0, nil);
		return __method_ret_13_4_16_5;
	end,

	ResetState = function(this)
		this.m_ParamReaded = false;
		this.m_EnableLearning = false;
	end,

	ExecCommand = function(this, instance, handler, _params, delta)
		local __cs2lua_func_info = luainitialize();
		local __retval_0, __retval_1 = luapcall(AiDoNormal.__ori_ExecCommand, this, __cs2lua_func_info, instance, handler, _params, delta);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
		if not __retval_0 then
			lualog("{0}", __retval_1);
			__retval_1 = false;
		end;
		return __retval_1;
	end,
	__ori_ExecCommand = function(this, __cs2lua_func_info, instance, handler, _params, delta)
		local __method_ret_24_4_48_5;
		local args;
		args = _params.Values;
		if (not this.m_ParamReaded) then 
			this.m_ParamReaded = true;
			local __old_val_29_12_29_29;
			__old_val_29_12_29_29 = this.m_ObjId;
			this.m_ObjId = invokeexternoperator(System.Int32, BoxedValue, "op_Implicit__Int32__BoxedValue", boxedvalue_list_get(__cs2lua_func_info, args, 1, 0));
			local __new_val_29_12_29_29;
			__new_val_29_12_29_29 = this.m_ObjId;
			recycleandkeepstructvalue(System.Int32, __old_val_29_12_29_29, __new_val_29_12_29_29);
			if (args.Count > 1) then 
				this.m_EnableLearning = (boxedvalue_list_get(__cs2lua_func_info, args, 1, 1):GetInt() ~= 0);
			end;
		end;
		local npc;
		npc = GameFramework.PluginFramework.Instance:GetEntityById(this.m_ObjId);
		if ((not isequal(nil, npc)) and (not npc:IsUnderControl())) then 
			local info;
			info = npc:GetAiStateInfo();
			local __switch_37_12_45_13;
			__switch_37_12_45_13 = info.CurState;
			if (__switch_37_12_45_13 == 1) then 
				info:ChangeToState(101);
				__method_ret_24_4_48_5 = true;
				return __method_ret_24_4_48_5;
			elseif (__switch_37_12_45_13 == 101) then 
				__method_ret_24_4_48_5 = AiDoNormal.CombatHandler(this, npc, info, delta);
				return __method_ret_24_4_48_5;
			elseif (__switch_37_12_45_13 == 102) then 
				__method_ret_24_4_48_5 = AiDoNormal.GohomeHandler(this, npc, info, delta);
				return __method_ret_24_4_48_5;
			end;
		end;
		__method_ret_24_4_48_5 = false;
		return __method_ret_24_4_48_5;
	end,

	CombatHandler = function(this, npc, info, deltaTime)
		local __cs2lua_func_info = luainitialize();
		local __retval_0, __retval_1 = luapcall(AiDoNormal.__ori_CombatHandler, this, __cs2lua_func_info, npc, info, deltaTime);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
		if not __retval_0 then
			lualog("{0}", __retval_1);
			__retval_1 = false;
		end;
		return __retval_1;
	end,
	__ori_CombatHandler = function(this, __cs2lua_func_info, npc, info, deltaTime)
		local __method_ret_50_4_115_5;
		info.Time = (info.Time + deltaTime);
		if (info.Time > 100) then 
			info.Time = 0;
		else
			__method_ret_50_4_115_5 = true;
			return __method_ret_50_4_115_5;
		end;
		if npc:GetSkillStateInfo():IsSkillActivated() then 
			__method_ret_50_4_115_5 = true;
			return __method_ret_50_4_115_5;
		end;
		local srcPos;
		srcPos = callexterninstancereturnstruct(npc:GetMovementStateInfo(), GameFramework.MovementStateInfo, "GetPosition3D");
		local distSqrToHome;
		distSqrToHome = GameFramework.Geometry.DistanceSquare__Vector3__Vector3(wrapexternstructargument(srcPos, ScriptRuntime.Vector3, OperationKind.LocalReference, SymbolKind.Local), getexterninstancestructmember(SymbolKind.Property, info, GameFramework.AiStateInfo, "HomePos"));
		if (distSqrToHome > (npc.GohomeRange * npc.GohomeRange)) then 
			AiCommand.AiStopPursue(npc);
			info:ChangeToState(102);
			__method_ret_50_4_115_5 = true;
			return __method_ret_50_4_115_5;
		end;
		local attackTarget;
		attackTarget = nil;
		local currSkInfo;
		currSkInfo = npc:GetSkillStateInfo();
		local skInfo;
		skInfo = AiLogicUtility.NpcFindCanUseSkill(npc);
		AiCommand.AiSelectSkill(npc, skInfo);
		if isequal(skInfo, nil) then 
			AiCommand.AiStopPursue(npc);
			info:ChangeToState(1);
			__method_ret_50_4_115_5 = false;
			return __method_ret_50_4_115_5;
		end;
		local relation;
		if (skInfo.ConfigData.targetType == 2) then relation = 1 else relation = 0 end;
		attackTarget = AiLogicUtility.GetNearstTargetHelper__EntityInfo__Single__CharacterRelation(npc, skInfo.Distance, relation);
		if ((not isequal(attackTarget, nil)) and (not isequal(nil, skInfo))) then 
			info.Target = attackTarget:GetId();
			local targetPos;
			targetPos = callexterninstancereturnstruct(attackTarget:GetMovementStateInfo(), GameFramework.MovementStateInfo, "GetPosition3D");
			local dir;
			dir = GameFramework.Geometry.GetYRadian__Vector3__Vector3(wrapexternstructargument(srcPos, ScriptRuntime.Vector3, OperationKind.LocalReference, SymbolKind.Local), wrapexternstructargument(targetPos, ScriptRuntime.Vector3, OperationKind.LocalReference, SymbolKind.Local));
			local curDir;
			curDir = npc:GetMovementStateInfo():GetFaceDir();
			if (UnityEngine.Mathf.Abs__Single((dir - curDir)) > 0.15700000) then 
				npc:GetMovementStateInfo():SetWantedFaceDir(dir);
			else
				AiCommand.AiStopPursue(npc);
				AiCommand.AiSkill(npc, skInfo.SkillId);
				--攻击目标
			end;
			__method_ret_50_4_115_5 = true;
			return __method_ret_50_4_115_5;
		end;
		attackTarget = AiLogicUtility.GetNearstTargetHelper__EntityInfo__Single__CharacterRelation(npc, npc.ViewRange, relation);
		if (not isequal(attackTarget, nil)) then 
			AiCommand.AiPursue(npc, callexterninstancereturnstruct(attackTarget:GetMovementStateInfo(), GameFramework.MovementStateInfo, "GetPosition3D"));
			-- 追赶目标
			__method_ret_50_4_115_5 = true;
			return __method_ret_50_4_115_5;
		end;
		currSkInfo:SetCurSkillInfo(0);
		AiCommand.AiStopPursue(npc);
		__method_ret_50_4_115_5 = true;
		return __method_ret_50_4_115_5;
	end,

	GohomeHandler = function(this, npc, info, deltaTime)
		local __cs2lua_func_info = luainitialize();
		local __retval_0, __retval_1 = luapcall(AiDoNormal.__ori_GohomeHandler, this, __cs2lua_func_info, npc, info, deltaTime);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
		if not __retval_0 then
			lualog("{0}", __retval_1);
			__retval_1 = false;
		end;
		return __retval_1;
	end,
	__ori_GohomeHandler = function(this, __cs2lua_func_info, npc, info, deltaTime)
		local __method_ret_117_4_140_5;
		info.Time = (info.Time + deltaTime);
		if (info.Time > 100) then 
			info.Time = 0;
		else
			__method_ret_117_4_140_5 = true;
			return __method_ret_117_4_140_5;
		end;
		local targetPos;
		targetPos = getexterninstancestructmember(SymbolKind.Property, info, GameFramework.AiStateInfo, "HomePos");
		local srcPos;
		srcPos = callexterninstancereturnstruct(npc:GetMovementStateInfo(), GameFramework.MovementStateInfo, "GetPosition3D");
		local distSqr;
		distSqr = GameFramework.Geometry.DistanceSquare__Vector3__Vector3(wrapexternstructargument(srcPos, ScriptRuntime.Vector3, OperationKind.LocalReference, SymbolKind.Local), getexterninstancestructmember(SymbolKind.Property, info, GameFramework.AiStateInfo, "HomePos"));
		if (distSqr <= 1) then 
			npc:GetMovementStateInfo().IsMoving = false;
			AiCommand.AiStopPursue(npc);
			info:ChangeToState(1);
			__method_ret_117_4_140_5 = false;
			return __method_ret_117_4_140_5;
		else
			npc:GetMovementStateInfo().IsMoving = true;
			npc:GetMovementStateInfo().TargetPosition = targetPos;
			AiCommand.AiPursue(npc, wrapexternstructargument(targetPos, ScriptRuntime.Vector3, OperationKind.LocalReference, SymbolKind.Local));
		end;
		__method_ret_117_4_140_5 = true;
		return __method_ret_117_4_140_5;
	end,

	ctor = function(this)
		AiDoNormal.__ctor(this);
	end,

	__ctor = function(this)
		if this.__ctor_called then 
			return;
		else
			this.__ctor_called = true;
		end;
	end,
	-------------------------------
	------ instance fields -------
	-------------------------------
	__init_obj_fields = function(this)
		rawset(this, "m_ObjId", 0);
		rawset(this, "m_EnableLearning", false);
		rawset(this, "m_ParamReaded", false);
		rawset(this, "__ctor_called", false);
	end,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("AiDoNormal::__define_class begin");

		local class = AiDoNormal;
		local obj_methods = {
			Clone = rawget(class, "Clone"),
			ResetState = rawget(class, "ResetState"),
			ExecCommand = rawget(class, "ExecCommand"),
			CombatHandler = rawget(class, "CombatHandler"),
			GohomeHandler = rawget(class, "GohomeHandler"),
			ctor = rawget(class, "ctor"),
			__ctor = rawget(class, "__ctor"),
		};
		local tmp_obj_method = nil;

		local __defineclass_return = defineclass(nil, "AiDoNormal", "AiDoNormal", class, obj_methods, false, false);
		Utility.Warn("AiDoNormal::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		c_IntervalTime = true,
		__cctor_called = true,
	},

	__obj_fields = {
		m_ObjId = true,
		m_EnableLearning = true,
		m_ParamReaded = true,
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__interfaces = {
		"GameFramework.Plugin.ISimpleStoryCommandPlugin",
	},
	__method_info = {
		CombatHandler = {
			private = true,
		},
		GohomeHandler = {
			private = true,
		},
		ctor = {
			ctor = true,
		},
	},
};


require "cs2lua__syslib";
require "cs2lua__externenums";
require "cs2lua__interfaces";
require "aicommand";
require "ailogicutility";
settempmetatable(AiDoNormal);
