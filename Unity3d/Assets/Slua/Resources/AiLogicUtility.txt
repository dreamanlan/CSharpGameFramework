require "cs2lua__namespaces"; 

AiLogicUtility = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		local __cs2dsl_newobj;
		__cs2dsl_newobj = newobject(AiLogicUtility, nil, nil, "ctor", 0, nil, ...);
		return __cs2dsl_newobj;
	end,

	GetNearstTargetHelper__EntityInfo__CharacterRelation = function(srcObj, relation)
		local __method_ret_31_4_34_5;
		__method_ret_31_4_34_5 = AiLogicUtility.GetNearstTargetHelper__EntityInfo__CharacterRelation__AiTargetType(srcObj, relation, 3);
		return __method_ret_31_4_34_5;
	end,

	GetNearstTargetHelper__EntityInfo__Single__CharacterRelation = function(srcObj, range, relation)
		local __method_ret_36_4_39_5;
		__method_ret_36_4_39_5 = AiLogicUtility.GetNearstTargetHelper__EntityInfo__Single__CharacterRelation__AiTargetType(srcObj, range, relation, 3);
		return __method_ret_36_4_39_5;
	end,

	GetNearstTargetHelper__EntityInfo__CharacterRelation__AiTargetType = function(srcObj, relation, type)
		local __method_ret_41_4_44_5;
		__method_ret_41_4_44_5 = AiLogicUtility.GetNearstTargetHelper__EntityInfo__Single__CharacterRelation__AiTargetType(srcObj, srcObj.ViewRange, relation, type);
		return __method_ret_41_4_44_5;
	end,

	GetNearstTargetHelper__EntityInfo__Single__CharacterRelation__AiTargetType = function(srcObj, range, relation, type)
		local __method_ret_46_4_54_5;
		local nearstTarget;
		nearstTarget = nil;
		local minDistSqr;
		minDistSqr = 999999;
		srcObj.SceneContext.KdTree:QueryWithAction__EntityInfo__Single__MyAction_2_Single_KdTreeObject(srcObj, range, function(distSqr, kdTreeObj)
			minDistSqr,nearstTarget = AiLogicUtility.StepCalcNearstTarget(srcObj, relation, type, distSqr, kdTreeObj.Object, minDistSqr, nearstTarget);
		end);
		__method_ret_46_4_54_5 = nearstTarget;
		return __method_ret_46_4_54_5;
	end,

	GetLivingCharacterInfoHelper = function(srcObj, id)
		local __method_ret_56_4_64_5;
		local target;
		target = srcObj.EntityManager:GetEntityInfo(id);
		if (not isequal(nil, target)) then 
			if target:IsDead() then 
				target = nil;
			end;
		end;
		__method_ret_56_4_64_5 = target;
		return __method_ret_56_4_64_5;
	end,

	GetSeeingLivingCharacterInfoHelper = function(srcObj, id)
		local __method_ret_66_4_74_5;
		local target;
		target = srcObj.EntityManager:GetEntityInfo(id);
		if (not isequal(nil, target)) then 
			if target:IsDead() then 
				target = nil;
			end;
		end;
		__method_ret_66_4_74_5 = target;
		return __method_ret_66_4_74_5;
	end,

	StepCalcNearstTarget = function(srcObj, relation, type, distSqr, obj, minDistSqr, nearstTarget)
		local target;
		target = AiLogicUtility.GetSeeingLivingCharacterInfoHelper(srcObj, obj:GetId());
		if ((not isequal(nil, target)) and (not target:IsDead())) then 
			if (not target:IsTargetNpc()) then 
				return minDistSqr, nearstTarget;
			end;
			if ((type == 1) and (target.EntityType ~= 2)) then 
				return minDistSqr, nearstTarget;
			end;
			if ((type == 2) and (target.EntityType ~= 3)) then 
				return minDistSqr, nearstTarget;
			end;
			if ((type == 0) and (target.EntityType ~= 0)) then 
				return minDistSqr, nearstTarget;
			end;
			if (relation == GameFramework.EntityInfo.GetRelation__EntityInfo__EntityInfo(srcObj, target)) then 
				if (((srcObj.EntityType == 2) or (not srcObj.IsPassive)) or srcObj.AttackerInfos:ContainsKey(target:GetId())) then 
					if (distSqr < minDistSqr) then 
						nearstTarget = target;
						minDistSqr = distSqr;
					end;
				end;
			end;
		end;
		return minDistSqr, nearstTarget;
	end,

	NpcFindCanUseSkill = function(npc)
		local __method_ret_103_4_126_5;
		local skStateInfo;
		skStateInfo = npc:GetSkillStateInfo();
		local priority;
		priority = -1;
		local skInfo;
		skInfo = nil;
		local curTime;
		curTime = GameFramework.TimeUtility.GetLocalMilliseconds();
		if (npc.AutoSkillIds.Count <= 0) then 
			__method_ret_103_4_126_5 = nil;
			return __method_ret_103_4_126_5;
		end;
		local randIndex;
		randIndex = GameFramework.Helper.Random.Next__Int32__Int32(0, npc.AutoSkillIds.Count);
		skInfo = skStateInfo:GetSkillInfoById(npc.AutoSkillIds[randIndex + 1]);
		local selectSkill;
		selectSkill = nil;
		if ((not isequal(nil, skInfo)) and (not skInfo:IsInCd(curTime))) then 
			selectSkill = skInfo;
		else
			local i;
			i = 0;
			while (i < npc.AutoSkillIds.Count) do
				skInfo = skStateInfo:GetSkillInfoById(npc.AutoSkillIds[i + 1]);
				if (((not isequal(nil, skInfo)) and (not skInfo:IsInCd(curTime))) and (skInfo.ConfigData.skillData.autoCast > priority)) then 
					selectSkill = skInfo;
					priority = skInfo.ConfigData.skillData.autoCast;
				end;
				i = (i + 1);
			end;
		end;
		__method_ret_103_4_126_5 = selectSkill;
		return __method_ret_103_4_126_5;
	end,

	cctor = function()
		AiLogicUtility.__cctor();
	end,

	__cctor = function()
		if AiLogicUtility.__cctor_called then 
			return;
		else
			AiLogicUtility.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	c_MaxComboInterval = 6000,
	c_MaxViewRange = 30,
	c_MaxViewRangeSqr = 900,
	__cctor_called = false,

	-------------------------------
	------ instance methods -------
	-------------------------------
	ctor = function(this)
		AiLogicUtility.__ctor(this);
	end,

	__ctor = function(this)
		if this.__ctor_called then 
			return;
		else
			this.__ctor_called = true;
		end;
	end,
	-------------------------------
	------ instance fields -------
	-------------------------------
	__init_obj_fields = function(this)
		rawset(this, "__ctor_called", false);
	end,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("AiLogicUtility::__define_class begin");

		local class = AiLogicUtility;
		local obj_methods = {
			ctor = rawget(class, "ctor"),
			__ctor = rawget(class, "__ctor"),
		};

		local __defineclass_return = defineclass(nil, "AiLogicUtility", "AiLogicUtility", class, obj_methods, false, false);
		Utility.Warn("AiLogicUtility::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		c_MaxComboInterval = true,
		c_MaxViewRange = true,
		c_MaxViewRangeSqr = true,
		__cctor_called = true,
	},

	__obj_fields = {
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__is_sealed_class = true,
};


require "cs2lua__syslib";
require "cs2lua__externenums";
require "cs2lua__interfaces";
settempmetatable(AiLogicUtility);
