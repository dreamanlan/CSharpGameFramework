require "cs2lua__namespaces"; 

AiQuery = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		local __cs2dsl_newobj;
		__cs2dsl_newobj = newobject(AiQuery, nil, nil, "ctor", 0, nil, ...);
		return __cs2dsl_newobj;
	end,

	cctor = function()
		AiQuery.__cctor();
	end,

	__cctor = function()
		if AiQuery.__cctor_called then 
			return;
		else
			AiQuery.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__cctor_called = false,

	-------------------------------
	------ instance methods -------
	-------------------------------
	SetProxy = function(this, result)
		this.m_Proxy = result;
	end,

	Clone = function(this)
		local __method_ret_17_4_34_5;
		local newObj;
		newObj = newobject(AiQuery, nil, nil, "ctor", 0, nil);
		if (not isequal(nil, this.m_Select)) then 
			newObj.m_Select = typeas(callinterface(this.m_Select, StorySystem.IStoryValue, "Clone"), StorySystem.IStoryValue, TypeKind.Interface);
		end;
		if (not isequal(nil, this.m_From)) then 
			newObj.m_From = typeas(callinterface(this.m_From, StorySystem.IStoryValue, "Clone"), StorySystem.IStoryValue, TypeKind.Interface);
		end;
		if (not isequal(nil, this.m_Where)) then 
			newObj.m_Where = typeas(callinterface(this.m_Where, StorySystem.IStoryValue, "Clone"), StorySystem.IStoryValue, TypeKind.Interface);
		end;
		local i;
		i = 0;
		while (i < this.m_OrderBy.Count) do
			newObj.m_OrderBy:Add(typeas(callinterface(this.m_OrderBy[i + 1], StorySystem.IStoryValue, "Clone"), StorySystem.IStoryValue, TypeKind.Interface));
			i = (i + 1);
		end;
		newObj.m_Desc = this.m_Desc;
		__method_ret_17_4_34_5 = newObj;
		return __method_ret_17_4_34_5;
	end,

	Evaluate = function(this, instance, handler, iterator, args)
		local __cs2lua_func_info = luainitialize();
		luapcall(AiQuery.__ori_Evaluate, this, __cs2lua_func_info, instance, handler, iterator, args);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori_Evaluate = function(this, __cs2lua_func_info, instance, handler, iterator, args)
		if ((not isequal(nil, this.m_Select)) and (not isequal(nil, this.m_From))) then 
			callinterface(this.m_From, StorySystem.IStoryValue, "Evaluate", instance, handler, wrapexternstructargument(iterator, BoxedValue, OperationKind.ParameterReference, SymbolKind.Parameter), args);
			local coll;
			coll = newexternlist(System.Collections.ArrayList, nil, nil, "ctor", 0, {});
			--筛选
			local enumer;
			enumer = typeas(getexterninterfacestructmember(this.m_From, StorySystem.IStoryValue, "Value", "get_Value").ObjectVal, System.Collections.IEnumerable, TypeKind.Interface);
			if (not isequal(nil, enumer)) then 
				local enumerator;
				enumerator = callinterface(enumer, System.Collections.IEnumerable, "GetEnumerator");
				while callinterface(enumerator, System.Collections.IEnumerator, "MoveNext") do
					local v;
					v = getinterface(enumerator, System.Collections.IEnumerator, "Current", "get_Current");
					local bv;
					bv = callexternstaticreturnstruct(BoxedValue, "FromObject", v);
					if (not isequal(nil, this.m_Where)) then 
						callinterface(this.m_Where, StorySystem.IStoryValue, "Evaluate", instance, handler, wrapexternstructargument(bv, BoxedValue, OperationKind.LocalReference, SymbolKind.Local), args);
						local wvObj;
						wvObj = getexterninterfacestructmember(this.m_Where, StorySystem.IStoryValue, "Value", "get_Value");
						local wv;
						wv = typecast(System.Convert.ChangeType__Object__Type(wvObj, System.Int32), System.Int32, TypeKind.Structure);
						if (wv ~= 0) then 
							AiQuery.AddRow(this, coll, wrapexternstructargument(bv, BoxedValue, OperationKind.LocalReference, SymbolKind.Local), instance, handler, args);
						end;
					else
						AiQuery.AddRow(this, coll, wrapexternstructargument(bv, BoxedValue, OperationKind.LocalReference, SymbolKind.Local), instance, handler, args);
					end;
				end;
			end;
			--排序
			local ct;
			ct = this.m_OrderBy.Count;
			if (ct > 0) then 
				coll:Sort__IComparer(newexternobject(AiQueryComparer, nil, nil, "ctor", 0, nil, this.m_Desc, ct));
			end;
			--收集结果
			local result;
			result = newexternlist(System.Collections.ArrayList, nil, nil, "ctor", 0, {});
			local i;
			i = 0;
			while (i < coll.Count) do
				local ao;
				ao = typeas(getexterninstanceindexer(System.Object, TypeKind.Class, System.Collections.ArrayList, coll, System.Collections.ArrayList, "get_Item", 1, i), System.Collections.ArrayList, TypeKind.Class);
				result:Add(getexterninstanceindexer(System.Object, TypeKind.Class, System.Collections.ArrayList, ao, System.Collections.ArrayList, "get_Item", 1, 0));
				i = (i + 1);
			end;
			this.m_Proxy.Value = invokeexternoperatorreturnstructimpl(__cs2lua_func_info, BoxedValue, BoxedValue, "op_Implicit__BoxedValue__ArrayList", result);
		end;
	end,

	LoadCallData = function(this, callData)
		local id;
		id = callData:GetId();
		if stringisequal(id, "select") then 
			this.m_Select = newexternobject(StorySystem.StoryValue, nil, nil, "ctor", 0, nil);
			callinterface(this.m_Select, StorySystem.IStoryValue, "InitFromDsl", callData:GetParam(0));
		elseif stringisequal(id, "from") then 
			this.m_From = newexternobject(StorySystem.StoryValue, nil, nil, "ctor", 0, nil);
			callinterface(this.m_From, StorySystem.IStoryValue, "InitFromDsl", callData:GetParam(0));
		elseif stringisequal(id, "where") then 
			this.m_Where = newexternobject(StorySystem.StoryValue, nil, nil, "ctor", 0, nil);
			callinterface(this.m_Where, StorySystem.IStoryValue, "InitFromDsl", callData:GetParam(0));
		elseif stringisequal(id, "orderby") then 
			local i;
			i = 0;
			while (i < callData:GetParamNum()) do
				local v;
				v = newexternobject(StorySystem.StoryValue, nil, nil, "ctor", 0, nil);
				v:InitFromDsl(callData:GetParam(i));
				this.m_OrderBy:Add(v);
				i = (i + 1);
			end;
		elseif stringisequal(id, "asc") then 
			this.m_Desc = false;
		elseif stringisequal(id, "desc") then 
			this.m_Desc = true;
		end;
	end,

	LoadFuncData = function(this, funcData)
		AiQuery.LoadCallData(this, funcData);
	end,

	LoadStatementData = function(this, statementData)
		local i;
		i = 0;
		while (i < statementData.Functions.Count) do
			local funcData;
			funcData = statementData.Functions[i + 1].AsFunction;
			AiQuery.LoadFuncData(this, funcData);
			i = (i + 1);
		end;
	end,

	AddRow = function(this, coll, v, instance, handler, args)
		local __cs2lua_func_info = luainitialize();
		luapcall(AiQuery.__ori_AddRow, this, __cs2lua_func_info, coll, v, instance, handler, args);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori_AddRow = function(this, __cs2lua_func_info, coll, v, instance, handler, args)
		local row;
		row = newexternlist(System.Collections.ArrayList, nil, nil, "ctor", 0, {});
		coll:Add(row);
		callinterface(this.m_Select, StorySystem.IStoryValue, "Evaluate", instance, handler, wrapexternstructargument(v, BoxedValue, OperationKind.ParameterReference, SymbolKind.Parameter), args);
		row:Add(getexterninterfacestructmember(this.m_Select, StorySystem.IStoryValue, "Value", "get_Value"):GetObject());
		local i;
		i = 0;
		while (i < this.m_OrderBy.Count) do
			local val;
			val = this.m_OrderBy[i + 1];
			callinterface(val, StorySystem.IStoryValue, "Evaluate", instance, handler, wrapexternstructargument(v, BoxedValue, OperationKind.ParameterReference, SymbolKind.Parameter), args);
			row:Add(getexterninterfacestructmember(val, StorySystem.IStoryValue, "Value", "get_Value"):GetObject());
			i = (i + 1);
		end;
	end,

	ctor = function(this)
		AiQuery.__ctor(this);
	end,

	__ctor = function(this)
		if this.__ctor_called then 
			return;
		else
			this.__ctor_called = true;
		end;
		this.m_OrderBy = newexternlist(System.Collections.Generic.List_T, buildglobalinfoonce("g_System_Collections_Generic_List_StorySystem_IStoryValue_TypeArgs", getglobalinfo("g_System_Collections_Generic_List_StorySystem_IStoryValue_TypeArgs") or {StorySystem.IStoryValue}), buildglobalinfoonce("g_System_Collections_Generic_List_StorySystem_IStoryValue_TypeKinds", getglobalinfo("g_System_Collections_Generic_List_StorySystem_IStoryValue_TypeKinds") or {TypeKind.Interface}), "ctor", 0, {});
	end,
	-------------------------------
	------ instance fields -------
	-------------------------------
	__init_obj_fields = function(this)
		rawset(this, "m_Desc", false);
		rawset(this, "__ctor_called", false);
	end,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("AiQuery::__define_class begin");

		local class = AiQuery;
		local obj_methods = {
			SetProxy = rawget(class, "SetProxy"),
			Clone = rawget(class, "Clone"),
			Evaluate = rawget(class, "Evaluate"),
			LoadCallData = rawget(class, "LoadCallData"),
			LoadFuncData = rawget(class, "LoadFuncData"),
			LoadStatementData = rawget(class, "LoadStatementData"),
			AddRow = rawget(class, "AddRow"),
			ctor = rawget(class, "ctor"),
			__ctor = rawget(class, "__ctor"),
		};
		local tmp_obj_method = nil;

		local __defineclass_return = defineclass(nil, "AiQuery", "AiQuery", class, obj_methods, false, false);
		Utility.Warn("AiQuery::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		__cctor_called = true,
	},

	__obj_fields = {
		m_Proxy = true,
		m_Select = true,
		m_From = true,
		m_Where = true,
		m_OrderBy = true,
		m_Desc = true,
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__interfaces = {
		"GameFramework.Plugin.IStoryValuePlugin",
	},
	__method_info = {
		AddRow = {
			private = true,
		},
		ctor = {
			ctor = true,
		},
	},
};


require "cs2lua__syslib";
require "cs2lua__externenums";
require "cs2lua__interfaces";
settempmetatable(AiQuery);
