require "cs2lua__namespaces"; 

AiSelectTarget = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		local __cs2dsl_newobj;
		__cs2dsl_newobj = newobject(AiSelectTarget, nil, nil, "ctor", 0, nil, ...);
		return __cs2dsl_newobj;
	end,

	cctor = function()
		AiSelectTarget.__cctor();
	end,

	__cctor = function()
		if AiSelectTarget.__cctor_called then 
			return;
		else
			AiSelectTarget.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__cctor_called = false,

	-------------------------------
	------ instance methods -------
	-------------------------------
	SetProxy = function(this, result)
		this.m_Proxy = result;
	end,

	Clone = function(this)
		local __method_ret_17_4_20_5;
		__method_ret_17_4_20_5 = newobject(AiSelectTarget, nil, nil, "ctor", 0, nil);
		return __method_ret_17_4_20_5;
	end,

	Evaluate = function(this, instance, handler, _params)
		local __cs2lua_func_info = luainitialize();
		luapcall(AiSelectTarget.__ori_Evaluate, this, __cs2lua_func_info, instance, handler, _params);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori_Evaluate = function(this, __cs2lua_func_info, instance, handler, _params)
		local args;
		args = _params.Values;
		local objId;
		objId = boxedvalue_list_get(__cs2lua_func_info, args, 1, 0):GetInt();
		local dist;
		dist = boxedvalue_list_get(__cs2lua_func_info, args, 1, 1):GetFloat();
		local npc;
		npc = GameFramework.PluginFramework.Instance:GetEntityById(objId);
		if (not isequal(nil, npc)) then 
			local entity;
			if (dist < 0.00010000) then 
				entity = AiLogicUtility.GetNearstTargetHelper__EntityInfo__CharacterRelation(npc, 0);
				if (not isequal(nil, entity)) then 
					npc:GetAiStateInfo().Target = entity:GetId();
				end;
			else
				entity = AiLogicUtility.GetNearstTargetHelper__EntityInfo__Single__CharacterRelation(npc, dist, 0);
				if (not isequal(nil, entity)) then 
					npc:GetAiStateInfo().Target = entity:GetId();
				end;
			end;
			this.m_Proxy.Value = callexternstaticreturnstruct(BoxedValue, "FromObject", entity);
		end;
	end,

	ctor = function(this)
		AiSelectTarget.__ctor(this);
	end,

	__ctor = function(this)
		if this.__ctor_called then 
			return;
		else
			this.__ctor_called = true;
		end;
	end,
	-------------------------------
	------ instance fields -------
	-------------------------------
	__init_obj_fields = function(this)
		rawset(this, "__ctor_called", false);
	end,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("AiSelectTarget::__define_class begin");

		local class = AiSelectTarget;
		local obj_methods = {
			SetProxy = rawget(class, "SetProxy"),
			Clone = rawget(class, "Clone"),
			Evaluate = rawget(class, "Evaluate"),
			ctor = rawget(class, "ctor"),
			__ctor = rawget(class, "__ctor"),
		};
		local tmp_obj_method = nil;

		local __defineclass_return = defineclass(nil, "AiSelectTarget", "AiSelectTarget", class, obj_methods, false, false);
		Utility.Warn("AiSelectTarget::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		__cctor_called = true,
	},

	__obj_fields = {
		m_Proxy = true,
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__interfaces = {
		"GameFramework.Plugin.ISimpleStoryValuePlugin",
	},
	__method_info = {
		ctor = {
			ctor = true,
		},
	},
};


require "cs2lua__syslib";
require "cs2lua__externenums";
require "cs2lua__interfaces";
require "ailogicutility";
settempmetatable(AiSelectTarget);
