require "cs2lua__namespaces"; 

TrackBulletTrigger = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		local __cs2dsl_newobj;
		__cs2dsl_newobj = newobject(TrackBulletTrigger, nil, nil, "ctor", 0, nil, ...);
		return __cs2dsl_newobj;
	end,

	cctor = function()
		TrackBulletTrigger.__cctor();
	end,

	__cctor = function()
		if TrackBulletTrigger.__cctor_called then 
			return;
		else
			TrackBulletTrigger.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__attributes = TrackBulletTrigger__Attrs,
	__cctor_called = false,

	-------------------------------
	------ instance methods -------
	-------------------------------
	SetProxy = function(this, triggerProxy)
		this.m_TriggerProxy = triggerProxy;
	end,

	Clone = function(this)
		local __method_ret_16_4_27_5;
		local triger;
		triger = newobject(TrackBulletTrigger, nil, nil, "ctor", 0, nil);
		triger.m_TrackBone:CopyFrom(this.m_TrackBone);
		triger.m_NoImpact = this.m_NoImpact;
		triger.m_Duration:CopyFrom(this.m_Duration);
		triger.m_NotMove = this.m_NotMove;
		triger.m_EffectPath:CopyFrom(this.m_EffectPath);
		triger.m_DeleteTime:CopyFrom(this.m_DeleteTime);
		__method_ret_16_4_27_5 = triger;
		return __method_ret_16_4_27_5;
	end,

	Reset = function(this)
		this.m_IsStarted = false;
		this.m_Effect = nil;
		this.m_BoneTransform = nil;
		this.m_Lifetime = 0;
		this.m_IsHit = false;
	end,

	Execute = function(this, sender, instance, delta, curSectionTime)
		local __cs2lua_func_info = luainitialize();
		local __retval_0, __retval_1 = luapcall(TrackBulletTrigger.__ori_Execute, this, __cs2lua_func_info, sender, instance, delta, curSectionTime);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
		if not __retval_0 then
			lualog("{0}", __retval_1);
			__retval_1 = false;
		end;
		return __retval_1;
	end,
	__ori_Execute = function(this, __cs2lua_func_info, sender, instance, delta, curSectionTime)
		local __method_ret_36_4_185_5;
		local senderObj;
		senderObj = typeas(sender, GameFramework.Skill.GfxSkillSenderInfo, TypeKind.Class);
		if isequal(nil, senderObj) then 
			__method_ret_36_4_185_5 = false;
			return __method_ret_36_4_185_5;
		end;
		if (senderObj.ConfigData.type == 0) then 
			__method_ret_36_4_185_5 = false;
			return __method_ret_36_4_185_5;
			--track只能在impact或buff里使用
		end;
		local obj;
		obj = senderObj.GfxObj;
		if invokeexternoperator(System.Boolean, UnityEngine.Object, "op_Inequality", nil, obj) then 
			if (curSectionTime >= this.m_TriggerProxy.StartTime) then 
				if (not this.m_IsStarted) then 
					this.m_IsStarted = true;
					--LogSystem.Warn("trackbullet start.");
					local dest;
					local trackBone;
					trackBone = this.m_TrackBone:Get(instance);
					this.m_BoneTransform = GameFramework.Utility.FindChildRecursive(obj.transform, trackBone);
					if invokeexternoperator(System.Boolean, UnityEngine.Object, "op_Inequality", nil, this.m_BoneTransform) then 
						dest = get_tranform_position(__cs2lua_func_info, this.m_BoneTransform);
					else
						dest = get_tranform_position(__cs2lua_func_info, obj.transform);
						dest.y = (dest.y + 1.50000000);
						GameFramework.LogSystem.Warn(luastrtocsstr("[skill:{0} dsl skill id:{1}] trackbullet bone {2} can\'t find."), senderObj.SkillId, instance.DslSkillId, trackBone);
					end;
					local __old_val_63_20_63_133;
					__old_val_63_20_63_133 = this.m_StartPos;
					this.m_StartPos = callexterninstancereturnstruct(GameFramework.EntityController.Instance, GameFramework.EntityController, "GetImpactSenderPosition", senderObj.ObjId, senderObj.SkillId, senderObj.Seq);
					local __new_val_63_20_63_133;
					__new_val_63_20_63_133 = this.m_StartPos;
					recycle_and_keep_vector3(__cs2lua_func_info, UnityEngine.Vector3, __old_val_63_20_63_133, __new_val_63_20_63_133);
					dest = callexternstaticreturnstruct(GameFramework.Utility, "FrontOfTarget", wrap_vector3(__cs2lua_func_info, this.m_StartPos), wrap_vector3(__cs2lua_func_info, dest), 0.10000000);
					local speedObj;
					--
					local __invoke_66_24_66_81;
					__invoke_66_24_66_81,speedObj = instance.Variables:TryGetValue(luastrtocsstr("emitSpeed"), __cs2lua_out);
					if __invoke_66_24_66_81 then

						this.m_Speed = typecast(speedObj, System.Single, TypeKind.Structure);
					else
						__method_ret_36_4_185_5 = false;
						return __method_ret_36_4_185_5;
					end;
					local duration;
					duration = this.m_Duration:Get(instance);
					if (duration > 0.00010000) then 
						local d;
						d = (duration / 1000.00000000);
						this.m_Lifetime = d;
						this.m_Speed = ((invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Vector3, UnityEngine.Vector3, "op_Subtraction", wrap_vector3(__cs2lua_func_info, dest), wrap_vector3(__cs2lua_func_info, this.m_StartPos))).magnitude / this.m_Lifetime);
					else
						this.m_Lifetime = 1.00000000;
						if (this.m_Speed > 0.00010000) then 
							this.m_Lifetime = ((invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Vector3, UnityEngine.Vector3, "op_Subtraction", wrap_vector3(__cs2lua_func_info, dest), wrap_vector3(__cs2lua_func_info, this.m_StartPos))).magnitude / this.m_Speed);
						end;
					end;
					local newSectionDuration;
					newSectionDuration = (this.m_TriggerProxy.StartTime + typecast(((this.m_Lifetime * 1000)), System.Int64, TypeKind.Structure));
					if (instance.CurSectionDuration < newSectionDuration) then 
						instance:SetCurSectionDuration(newSectionDuration);
					end;
					local dir;
					local dirObj;
					--
					local __invoke_88_24_88_77;
					__invoke_88_24_88_77,dirObj = instance.Variables:TryGetValue(luastrtocsstr("emitDir"), __cs2lua_out);
					if __invoke_88_24_88_77 then

						dir = typecast(dirObj, UnityEngine.Quaternion, TypeKind.Structure);
					else
						dir = get_quaternion_identity(__cs2lua_func_info);
					end;
					local scale;
					local scaleObj;
					--
					local __invoke_95_24_95_81;
					__invoke_95_24_95_81,scaleObj = instance.Variables:TryGetValue(luastrtocsstr("emitScale"), __cs2lua_out);
					if __invoke_95_24_95_81 then

						scale = typecast(scaleObj, UnityEngine.Vector3, TypeKind.Structure);
					else
						scale = get_vector3_one(__cs2lua_func_info);
					end;
					local lookDir;
					lookDir = invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Vector3, UnityEngine.Vector3, "op_Subtraction", wrap_vector3(__cs2lua_func_info, dest), wrap_vector3(__cs2lua_func_info, this.m_StartPos));
					local q;
					q = call_quaternion_lookrotation(__cs2lua_func_info, wrap_vector3(__cs2lua_func_info, lookDir));
					local __old_val_102_20_102_122;
					__old_val_102_20_102_122 = this.m_ControlPos;
					this.m_ControlPos = invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Vector3, UnityEngine.Vector3, "op_Addition", wrap_vector3(__cs2lua_func_info, this.m_StartPos), callexternstaticreturnstruct(UnityEngine.Vector3, "Scale", invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Vector3, UnityEngine.Quaternion, "op_Multiply__Quaternion__Vector3", invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Quaternion, UnityEngine.Quaternion, "op_Multiply__Quaternion__Quaternion", wrap_quaternion(__cs2lua_func_info, q), wrap_quaternion(__cs2lua_func_info, dir)), get_vector3_forward(__cs2lua_func_info)), invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Vector3, UnityEngine.Vector3, "op_Multiply__Vector3__Single", invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Vector3, UnityEngine.Vector3, "op_Multiply__Vector3__Single", wrap_vector3(__cs2lua_func_info, scale), lookDir.magnitude), 0.50000000)));
					local __new_val_102_20_102_122;
					__new_val_102_20_102_122 = this.m_ControlPos;
					recycle_and_keep_vector3(__cs2lua_func_info, UnityEngine.Vector3, __old_val_102_20_102_122, __new_val_102_20_102_122);
					local effectPath;
					effectPath = SkillSystem.SkillParamUtility.RefixResourceVariable(luastrtocsstr("emitEffect"), instance, senderObj.ConfigData.resources);
					this.m_Effect = typeas(GameFramework.ResourceSystem.Instance:NewObject__String__Single(effectPath, this.m_Lifetime), UnityEngine.GameObject, TypeKind.Class);
					if invokeexternoperator(System.Boolean, UnityEngine.Object, "op_Inequality", nil, this.m_Effect) then 
						--LogSystem.Warn("trackbullet effect {0} {1}", effectPath, m_Lifetime);
						BulletManager.AddBullet(BulletManager.get_Instance(), this.m_Effect);
						senderObj.TrackEffectObj = this.m_Effect;
						GameFramework.Skill.Trigers.TriggerUtil.SetObjVisible(this.m_Effect, true);
						this.m_Effect:SetActive(false);
						this.m_Effect.transform.position = this.m_StartPos;
						this.m_Effect.transform.localRotation = q;
						this.m_Effect:SetActive(true);
						--LogSystem.Warn("trackbullet effect actived {0} {1} pos {2} {3} {4}", effectPath, m_Lifetime, m_StartPos.x, m_StartPos.y, m_StartPos.z);
					else
						if System.String.IsNullOrEmpty(effectPath) then 
							GameFramework.LogSystem.Warn(luastrtocsstr("[skill:{0} dsl skill id:{1}] trackbullet effect is empty."), senderObj.SkillId, instance.DslSkillId);
						else
							GameFramework.LogSystem.Warn(luastrtocsstr("[skill:{0} dsl skill id:{1}] trackbullet effect {2} can\'t find."), senderObj.SkillId, instance.DslSkillId, effectPath);
						end;
					end;
				elseif invokeexternoperator(System.Boolean, UnityEngine.Object, "op_Inequality", nil, this.m_Effect) then 
					if ((not this.m_NotMove) and (not this.m_IsHit)) then 
						local dest;
						if invokeexternoperator(System.Boolean, UnityEngine.Object, "op_Inequality", nil, this.m_BoneTransform) then 
							dest = get_tranform_position(__cs2lua_func_info, this.m_BoneTransform);
						else
							dest = get_tranform_position(__cs2lua_func_info, obj.transform);
							dest.y = (dest.y + 1.50000000);
						end;
						dest = callexternstaticreturnstruct(GameFramework.Utility, "FrontOfTarget", wrap_vector3(__cs2lua_func_info, this.m_StartPos), wrap_vector3(__cs2lua_func_info, dest), 0.10000000);
						--m_Effect.transform.position = Vector3.MoveTowards(m_Effect.transform.position, dest, m_RealSpeed * Time.deltaTime);
						this.m_Effect.transform.position = callexternstaticreturnstruct(GameFramework.Utility, "GetBezierPoint", wrap_vector3(__cs2lua_func_info, this.m_StartPos), wrap_vector3(__cs2lua_func_info, this.m_ControlPos), wrap_vector3(__cs2lua_func_info, dest), ((((curSectionTime - this.m_TriggerProxy.StartTime)) / 1000.00000000) / this.m_Lifetime));
						local pos;
						pos = get_tranform_position(__cs2lua_func_info, this.m_Effect.transform);
						if TrackBulletTrigger.CheckCollide(this, senderObj, instance, obj) then 
							__method_ret_36_4_185_5 = true;
							return __method_ret_36_4_185_5;
						end;
						--LogSystem.Warn("trackbullet effect move to {0} {1} {2}", pos.x, pos.y, pos.z);
						if ((invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Vector3, UnityEngine.Vector3, "op_Subtraction", wrap_vector3(__cs2lua_func_info, dest), get_tranform_position(__cs2lua_func_info, this.m_Effect.transform))).sqrMagnitude <= 0.01000000) then 
							local __old_val_142_28_142_92;
							__old_val_142_28_142_92 = this.m_HitEffectRotation;
							this.m_HitEffectRotation = call_quaternion_lookrotation(__cs2lua_func_info, invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Vector3, UnityEngine.Vector3, "op_Subtraction", wrap_vector3(__cs2lua_func_info, this.m_StartPos), wrap_vector3(__cs2lua_func_info, dest)));
							local __new_val_142_28_142_92;
							__new_val_142_28_142_92 = this.m_HitEffectRotation;
							recycle_and_keep_quaternion(__cs2lua_func_info, UnityEngine.Quaternion, __old_val_142_28_142_92, __new_val_142_28_142_92);
							if this.m_NoImpact then 
								instance:SetVariable(luastrtocsstr("hitEffectRotation"), this.m_HitEffectRotation);
							else
								local impactId;
								impactId = GameFramework.Skill.Trigers.TriggerUtil.GetSkillImpactId(instance.Variables, senderObj.ConfigData);
								local args;
								args = GameFramework.Skill.Trigers.TriggerUtil.CalcImpactConfig(0, impactId, instance, senderObj.ConfigData, __cs2lua_out);
								if args:ContainsKey(luastrtocsstr("hitEffectRotation")) then 
									args[luastrtocsstr("hitEffectRotation")] = this.m_HitEffectRotation;
								else
									args:Add(luastrtocsstr("hitEffectRotation"), this.m_HitEffectRotation);
								end;
								GameFramework.EntityController.Instance:TrackSendImpact(senderObj.ObjId, senderObj.SkillId, senderObj.Seq, impactId, args);
								--LogSystem.Warn("trackbullet effect hit target {0} {1} {2}", pos.x, pos.y, pos.z);
							end;
							this.m_IsHit = true;
						end;
					end;
					BulletManager.UpdatePos(BulletManager.get_Instance(), this.m_Effect);
					if TrackBulletTrigger.CheckCollide(this, senderObj, instance, obj) then 
						__method_ret_36_4_185_5 = true;
						return __method_ret_36_4_185_5;
					end;
					if (this.m_IsHit or (curSectionTime > (this.m_TriggerProxy.StartTime + (this.m_Lifetime * 1000)))) then 
						this.m_Effect:SetActive(false);
						GameFramework.ResourceSystem.Instance:RecycleObject(this.m_Effect);
						BulletManager.RemoveBullet(BulletManager.get_Instance(), this.m_Effect);
						this.m_Effect = nil;
						instance:StopCurSection();
						--LogSystem.Warn("trackbullet effect finish.");
						__method_ret_36_4_185_5 = false;
						return __method_ret_36_4_185_5;
					end;
				else
					__method_ret_36_4_185_5 = false;
					return __method_ret_36_4_185_5;
				end;
				__method_ret_36_4_185_5 = true;
				return __method_ret_36_4_185_5;
			else
				__method_ret_36_4_185_5 = true;
				return __method_ret_36_4_185_5;
			end;
		else
			instance:StopCurSection();
			__method_ret_36_4_185_5 = false;
			return __method_ret_36_4_185_5;
		end;
		return nil;
	end,

	OnInitProperties = function(this)
		this.m_TriggerProxy:AddProperty(luastrtocsstr("TrackBone"), function()
			local __method_ret_188_48_188_91;
			__method_ret_188_48_188_91 = this.m_TrackBone.EditableValue;
			return __method_ret_188_48_188_91;
		end, function(val)
			this.m_TrackBone.EditableValue = val;
		end);
		this.m_TriggerProxy:AddProperty(luastrtocsstr("Duration"), function()
			local __method_ret_189_47_189_89;
			__method_ret_189_47_189_89 = this.m_Duration.EditableValue;
			return __method_ret_189_47_189_89;
		end, function(val)
			this.m_Duration.EditableValue = val;
		end);
	end,

	LoadCallData = function(this, callData, instance)
		local num;
		num = callData:GetParamNum();
		if (num > 0) then 
			this.m_TrackBone:Set__ISyntaxComponent(callData:GetParam(0));
		end;
		if (num > 1) then 
			this.m_NoImpact = stringisequal(callData:GetParamId(1), "true");
		end;
		if (num > 2) then 
			this.m_TriggerProxy.StartTime = System.Int64.Parse__String(callData:GetParamId(2));
		end;
		if (num > 3) then 
			this.m_Duration:Set__ISyntaxComponent(callData:GetParam(3));
		end;
		if (num > 4) then 
			this.m_NotMove = stringisequal(callData:GetParamId(4), "true");
		end;
		if (num > 5) then 
			this.m_EffectPath:Set__ISyntaxComponent(callData:GetParam(5));
		end;
		if (num > 6) then 
			this.m_DeleteTime:Set__ISyntaxComponent(callData:GetParam(6));
		end;
	end,

	ShowExplodeEffect = function(this, obj, senderObj, instance)
		local __cs2lua_func_info = luainitialize();
		luapcall(TrackBulletTrigger.__ori_ShowExplodeEffect, this, __cs2lua_func_info, obj, senderObj, instance);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori_ShowExplodeEffect = function(this, __cs2lua_func_info, obj, senderObj, instance)
		local deleteTime;
		deleteTime = this.m_DeleteTime:Get(instance);
		if (deleteTime <= 0) then 
			GameFramework.LogSystem.Warn(luastrtocsstr("[skill:{0} dsl skill id:{1}] explode effect deleteTime <= 0."), senderObj.SkillId, instance.DslSkillId);
			return;
		end;
		local effectPath;
		effectPath = this.m_EffectPath:Get__SkillInstance__Dictionary_2_String_String(instance, senderObj.ConfigData.resources);
		local effectObj;
		effectObj = nil;
		if System.String.IsNullOrEmpty(effectPath) then 
			GameFramework.LogSystem.Warn(luastrtocsstr("[skill:{0} dsl skill id:{1}] explode effect is empty."), senderObj.SkillId, instance.DslSkillId);
		else
			effectObj = typeas(GameFramework.ResourceSystem.Instance:NewObject__String__Single(effectPath, (deleteTime / 1000.00000000)), UnityEngine.GameObject, TypeKind.Class);
			if invokeexternoperator(System.Boolean, UnityEngine.Object, "op_Equality", nil, effectObj) then 
				GameFramework.LogSystem.Warn(luastrtocsstr("[skill:{0} dsl skill id:{1}] selfeffect effect {2} can\'t find."), senderObj.SkillId, instance.DslSkillId, effectPath);
			end;
		end;
		if invokeexternoperator(System.Boolean, UnityEngine.Object, "op_Inequality", nil, effectObj) then 
			GameFramework.Skill.Trigers.TriggerUtil.SetObjVisible(effectObj, true);
			effectObj:SetActive(false);
			if invokeexternoperator(System.Boolean, UnityEngine.Object, "op_Inequality", nil, obj.transform) then 
				effectObj.transform:SetParent__Transform(obj.transform);
				effectObj.transform.localPosition = get_vector3_zero(__cs2lua_func_info);
				effectObj.transform.localScale = get_vector3_one(__cs2lua_func_info);
				effectObj.transform.rotation = this.m_HitEffectRotation;
				effectObj.transform:SetParent__Transform(nil);
				local em;
				em = instance.CustomDatas:GetData__Type(GameFramework.Skill.Trigers.EffectManager);
				if isequal(em, nil) then 
					em = newexternobject(GameFramework.Skill.Trigers.EffectManager, nil, nil, "ctor", 0, nil);
					instance.CustomDatas:AddData__Type__Object(GameFramework.Skill.Trigers.EffectManager, em);
				end;
				em:AddEffect(effectObj);
				em:SetParticleSpeed(instance.EffectScale);
			end;
			effectObj:SetActive(true);
		end;
	end,

	CheckCollide = function(this, senderObj, instance, obj)
		local __cs2lua_func_info = luainitialize();
		local __retval_0, __retval_1 = luapcall(TrackBulletTrigger.__ori_CheckCollide, this, __cs2lua_func_info, senderObj, instance, obj);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
		if not __retval_0 then
			lualog("{0}", __retval_1);
			__retval_1 = false;
		end;
		return __retval_1;
	end,
	__ori_CheckCollide = function(this, __cs2lua_func_info, senderObj, instance, obj)
		local __method_ret_266_4_280_5;
		local other;
		other = BulletManager.GetCollideObject(BulletManager.get_Instance(), this.m_Effect);
		if (invokeexternoperator(System.Boolean, UnityEngine.Object, "op_Inequality", nil, other) and (not this.m_IsHit)) then 
			this.m_IsHit = true;
			local __old_val_271_12_271_94;
			__old_val_271_12_271_94 = this.m_HitEffectRotation;
			this.m_HitEffectRotation = call_quaternion_lookrotation(__cs2lua_func_info, invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Vector3, UnityEngine.Vector3, "op_Subtraction", wrap_vector3(__cs2lua_func_info, this.m_StartPos), get_tranform_position(__cs2lua_func_info, obj.transform)));
			local __new_val_271_12_271_94;
			__new_val_271_12_271_94 = this.m_HitEffectRotation;
			recycle_and_keep_quaternion(__cs2lua_func_info, UnityEngine.Quaternion, __old_val_271_12_271_94, __new_val_271_12_271_94);
			TrackBulletTrigger.ShowExplodeEffect(this, this.m_Effect, senderObj, instance);
			local pos1;
			pos1 = get_tranform_position(__cs2lua_func_info, this.m_Effect.transform);
			local pos2;
			pos2 = get_tranform_position(__cs2lua_func_info, other.transform);
			--LogSystem.Warn("trackbullet effect explode {0}({1} {2} {3}) with {4}({5} {6} {7})", m_Effect.name, pos1.x, pos1.y, pos1.z, other.name, pos2.x, pos2.y, pos2.z);
			__method_ret_266_4_280_5 = true;
			return __method_ret_266_4_280_5;
		end;
		__method_ret_266_4_280_5 = false;
		return __method_ret_266_4_280_5;
	end,

	ctor = function(this)
		TrackBulletTrigger.__ctor(this);
	end,

	__ctor = function(this)
		local __cs2lua_func_info = luainitialize();
		luapcall(TrackBulletTrigger.__ori___ctor, this, __cs2lua_func_info);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori___ctor = function(this, __cs2lua_func_info)
		if this.__ctor_called then 
			return;
		else
			this.__ctor_called = true;
		end;
		this.m_TrackBone = newexternobject(SkillSystem.SkillStringParam, nil, nil, "ctor", 0, nil);
		this.m_Duration = newexternobject(SkillSystem.SkillLongParam, nil, nil, "ctor", 0, nil);
		this.m_EffectPath = newexternobject(SkillSystem.SkillResourceParam, nil, nil, "ctor", 0, nil);
		this.m_DeleteTime = newexternobject(SkillSystem.SkillLongParam, nil, nil, "ctor", 0, nil);
		this.m_StartPos = get_vector3_zero(__cs2lua_func_info);
		recycle_and_keep_vector3(__cs2lua_func_info, UnityEngine.Vector3, nil, this.m_StartPos);
		this.m_ControlPos = get_vector3_zero(__cs2lua_func_info);
		recycle_and_keep_vector3(__cs2lua_func_info, UnityEngine.Vector3, nil, this.m_ControlPos);
		this.m_HitEffectRotation = new_quaternion(__cs2lua_func_info, nil);
		recycle_and_keep_quaternion(__cs2lua_func_info, UnityEngine.Quaternion, nil, this.m_HitEffectRotation);
	end,
	-------------------------------
	------ instance fields -------
	-------------------------------
	__init_obj_fields = function(this)
		rawset(this, "m_NoImpact", false);
		rawset(this, "m_NotMove", false);
		rawset(this, "m_Speed", 10.00000000);
		rawset(this, "m_Lifetime", 1.00000000);
		rawset(this, "m_IsStarted", false);
		rawset(this, "m_IsHit", false);
		rawset(this, "__attributes", TrackBulletTrigger__Attrs);
		rawset(this, "__ctor_called", false);
	end,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("TrackBulletTrigger::__define_class begin");

		local class = TrackBulletTrigger;
		local obj_methods = {
			SetProxy = rawget(class, "SetProxy"),
			Clone = rawget(class, "Clone"),
			Reset = rawget(class, "Reset"),
			Execute = rawget(class, "Execute"),
			OnInitProperties = rawget(class, "OnInitProperties"),
			LoadCallData = rawget(class, "LoadCallData"),
			ShowExplodeEffect = rawget(class, "ShowExplodeEffect"),
			CheckCollide = rawget(class, "CheckCollide"),
			ctor = rawget(class, "ctor"),
			__ctor = rawget(class, "__ctor"),
		};
		local tmp_obj_method = nil;

		local __defineclass_return = defineclass(nil, "TrackBulletTrigger", "TrackBulletTrigger", class, obj_methods, false, false);
		Utility.Warn("TrackBulletTrigger::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		__attributes = true,
		__cctor_called = true,
	},

	__obj_fields = {
		m_TrackBone = true,
		m_NoImpact = true,
		m_Duration = true,
		m_NotMove = true,
		m_EffectPath = true,
		m_DeleteTime = true,
		m_StartPos = true,
		m_ControlPos = true,
		m_Speed = true,
		m_Lifetime = true,
		m_IsStarted = true,
		m_HitEffectRotation = true,
		m_Effect = true,
		m_BoneTransform = true,
		m_IsHit = true,
		m_TriggerProxy = true,
		__attributes = true,
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__interfaces = {
		"GameFramework.Plugin.ISkillTriggerPlugin",
	},
	__method_info = {
		ShowExplodeEffect = {
			private = true,
		},
		CheckCollide = {
			private = true,
		},
		ctor = {
			ctor = true,
		},
	},
};


require "cs2lua__syslib";
require "cs2lua__attributes";
require "cs2lua__externenums";
require "cs2lua__interfaces";
require "bulletmanager";
settempmetatable(TrackBulletTrigger);
