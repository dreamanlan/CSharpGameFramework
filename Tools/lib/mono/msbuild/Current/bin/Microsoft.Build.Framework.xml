<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Build.Framework</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Build.Framework.BuildEngineResult">
            <summary>
            This structure is used to return the result of the build and the target outputs.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEngineResult.buildResult">
            <summary>
            Did the build pass or fail
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEngineResult.targetOutputsPerProject">
            <summary>
            Target outputs by project
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEngineResult.#ctor(System.Boolean,System.Collections.Generic.List{System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.ITaskItem[]}})">
            <summary>
            The constructor takes the result of the build and a list of the target outputs per project
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEngineResult.Result">
            <summary>
            Did the build pass or fail. True means the build succeeded, False means the build failed.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEngineResult.TargetOutputsPerProject">
            <summary>
            Outputs of the targets per project.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildErrorEventArgs">
            <summary>
            Arguments for error events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildErrorEventArgs.subcategory">
            <summary>
            Subcategory of the error
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildErrorEventArgs.code">
            <summary>
            Error code
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildErrorEventArgs.file">
            <summary>
            File name
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildErrorEventArgs.projectFile">
            <summary>
            The project which issued the event
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildErrorEventArgs.lineNumber">
            <summary>
            Line number
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildErrorEventArgs.columnNumber">
            <summary>
            Column number
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildErrorEventArgs.endLineNumber">
            <summary>
            End line number
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildErrorEventArgs.endColumnNumber">
            <summary>
            End column number
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildErrorEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            This constructor allows all event data to be initialized
            </summary>
            <param name="subcategory">event sub-category</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildErrorEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.DateTime)">
            <summary>
            This constructor which allows a timestamp to be set
            </summary>
            <param name="subcategory">event sub-category</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="eventTimestamp">Timestamp when event was created</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildErrorEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.DateTime,System.Object[])">
            <summary>
            This constructor which allows a timestamp to be set
            </summary>
            <param name="subcategory">event sub-category</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="eventTimestamp">Timestamp when event was created</param>
            <param name="messageArgs">message arguments</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildErrorEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildErrorEventArgs.Subcategory">
            <summary>
            The custom sub-type of the event.         
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildErrorEventArgs.Code">
            <summary>
            Code associated with event. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildErrorEventArgs.File">
            <summary>
            File associated with event.   
            </summary>  
        </member>
        <member name="P:Microsoft.Build.Framework.BuildErrorEventArgs.ProjectFile">
            <summary>
            The project file which issued this event.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildErrorEventArgs.LineNumber">
            <summary>
            Line number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildErrorEventArgs.ColumnNumber">
            <summary>
            Column number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildErrorEventArgs.EndLineNumber">
            <summary>
            Ending line number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildErrorEventArgs.EndColumnNumber">
            <summary>
            Ending column number of interest in associated file. 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildErrorEventArgs.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Serializes to a stream through a binary writer
            </summary>
            <param name="writer">Binary writer which is attached to the stream the event will be serialized into</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildErrorEventArgs.CreateFromStream(System.IO.BinaryReader,System.Int32)">
            <summary>
            Deserializes to a stream through a binary writer
            </summary>
            <param name="reader">Binary reader which the object will be deserialized from</param>
            <param name="version">The version of the runtime the message packet was created from</param>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildEventArgs">
            <summary>
            This class encapsulates the default data associated with build events. 
            It is intended to be extended/sub-classed.
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventArgs.message">
            <summary>
            Message
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventArgs.helpKeyword">
            <summary>
            Help keyword
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventArgs.senderName">
            <summary>
            Sender name
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventArgs.timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventArgs.threadId">
            <summary>
            Thread id
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventArgs.buildEventContext">
            <summary>
            Build event context
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            This constructor allows all event data to be initialized
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventArgs.#ctor(System.String,System.String,System.String,System.DateTime)">
            <summary>
            This constructor allows all event data to be initialized while providing a custom timestamp.
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="eventTimestamp">TimeStamp of when the event was created</param>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventArgs.Timestamp">
            <summary>
            The time when event was raised.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventArgs.ThreadId">
            <summary>
            The thread that raised event.  
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventArgs.Message">
            <summary>
            Text of event. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventArgs.HelpKeyword">
            <summary>
            Custom help keyword associated with event.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventArgs.SenderName">
            <summary>
            Name of the object sending this event.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventArgs.BuildEventContext">
            <summary>
            Event contextual information for the build event argument
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventArgs.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Serializes to a stream through a binary writer
            </summary>
            <param name="writer">Binary writer which is attached to the stream the event will be serialized into</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventArgs.CreateFromStream(System.IO.BinaryReader,System.Int32)">
            <summary>
            Deserializes from a stream through a binary reader
            </summary>
            <param name="reader">Binary reader which is attached to the stream the event will be deserialized from</param>
            <param name="version">The version of the runtime the message packet was created from</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventArgs.SetBuildEventContextDefaultBeforeSerialization(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Run before the object has been deserialized
            UNDONE (Logging.)  Can this and the next function go away, and instead return a BuildEventContext.Invalid from
            the property if the buildEventContext field is null?
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventArgs.SetBuildEventContextDefaultAfterSerialization(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Run after the object has been deserialized
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildEventContext">
            <summary>
            Will provide location information for an event, this is especially 
            needed in a multi processor environment
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext._nodeId">
            <summary>
            Node event was in 
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext._targetId">
            <summary>
            Target event was in
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext._projectContextId">
             <summary>
            The node-unique project request context the event was in
             </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext._taskId">
            <summary>
            Id of the task the event was caused from
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext._projectInstanceId">
            <summary>
            The id of the project instance to which this event refers.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext._submissionId">
            <summary>
            The id of the submission.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext._evaluationId">
            <summary>
            The id of the evaluation
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventContext.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This is the original constructor.  No one should ever use this except internally for backward compatibility.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventContext.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a BuildEventContext with a specified project instance id.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventContext.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a BuildEventContext with a specific submission id
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventContext.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a BuildEventContext
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventContext.Invalid">
            <summary>
            Returns a default invalid BuildEventContext
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventContext.EvaluationId">
            <summary>
            Retrieves the Evaluation id.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventContext.NodeId">
            <summary>
            NodeId where event took place
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventContext.TargetId">
            <summary>
            Id of the target the event was in when the event was fired
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventContext.ProjectContextId">
            <summary>
            Retrieves the Project Context id.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventContext.TaskId">
            <summary>
            Retrieves the task id.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventContext.ProjectInstanceId">
            <summary>
            Retrieves the project instance id.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventContext.SubmissionId">
            <summary>
            Retrieves the Submission id.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventContext.BuildRequestId">
            <summary>
            Retrieves the BuildRequest id.  Note that this is not the same as the global request id on a BuildRequest or BuildResult.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.InvalidProjectContextId">
            <summary>
            Indicates an invalid project context identifier.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.InvalidTaskId">
            <summary>
            Indicates an invalid task identifier.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.InvalidTargetId">
            <summary>
            Indicates an invalid target identifier.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.InvalidNodeId">
            <summary>
            Indicates an invalid node identifier.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.InvalidProjectInstanceId">
            <summary>
            Indicates an invalid project instance identifier.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.InvalidSubmissionId">
            <summary>
            Indicates an invalid submission identifier.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.InvalidEvaluationId">
            <summary>
            Indicates an invalid evaluation identifier.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventContext.GetHashCode">
            <summary>
            Retrieves a hash code for this BuildEventContext.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventContext.Equals(System.Object)">
            <summary>
            Compare a BuildEventContext with this BuildEventContext. 
            A build event context is compared in the following way.
            
            1. If the object references are the same the contexts are equivalent
            2. If the object type is the same and the Id values in the context are the same, the contexts are equivalent
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventContext.op_Equality(Microsoft.Build.Framework.BuildEventContext,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Override == so the  equals comparison using this operator will be the same as
            .Equals
            </summary>
            <param name="left">Left hand side operand</param>
            <param name="right">Right hand side operand</param>
            <returns>True if the object values are identical, false if they are not identical</returns>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventContext.op_Inequality(Microsoft.Build.Framework.BuildEventContext,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Override != so the  equals comparison using this operator will be the same as
             ! Equals
            </summary>
            <param name="left">Left hand side operand</param>
            <param name="right">Right hand side operand</param>
            <returns>True if the object values are not identical, false if they are identical</returns>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventContext.InternalEquals(Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Verify the fields are identical
            </summary>
            <param name="buildEventContext">BuildEventContext to compare to this instance</param>
            <returns>True if the value fields are the same, false if otherwise</returns>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildFinishedEventArgs">
            <summary>
            This class represents the event arguments for build finished events.
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildFinishedEventArgs.succeeded">
            <summary>
            Whether the build succeeded
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildFinishedEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildFinishedEventArgs.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor to initialize all parameters.
            Sender field cannot be set here and is assumed to be "MSBuild"
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="succeeded">True indicates a successful build</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildFinishedEventArgs.#ctor(System.String,System.String,System.Boolean,System.DateTime)">
            <summary>
            Constructor which allows the timestamp to be set
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="succeeded">True indicates a successful build</param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildFinishedEventArgs.#ctor(System.String,System.String,System.Boolean,System.DateTime,System.Object[])">
            <summary>
            Constructor which allows the timestamp to be set
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="succeeded">True indicates a successful build</param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
            <param name="messageArgs">message arguments</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildFinishedEventArgs.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Serializes to a stream through a binary writer
            </summary>
            <param name="writer">Binary writer which is attached to the stream the event will be serialized into</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildFinishedEventArgs.CreateFromStream(System.IO.BinaryReader,System.Int32)">
            <summary>
            Deserializes from a stream through a binary reader
            </summary>
            <param name="reader">Binary reader which is attached to the stream the event will be deserialized from</param>
            <param name="version">The version of the runtime the message packet was created from</param>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildFinishedEventArgs.Succeeded">
            <summary>
            Succeeded is true if the build succeeded; false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.MessageImportance">
            <summary>
            This enumeration provides three levels of importance for messages.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.MessageImportance.High">
            <summary>
            High importance, appears in less verbose logs
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.MessageImportance.Normal">
            <summary>
            Normal importance
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.MessageImportance.Low">
            <summary>
            Low importance, appears in more verbose logs
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildMessageEventArgs">
            <summary>
            Arguments for message events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildMessageEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildMessageEventArgs.#ctor(System.String,System.String,System.String,Microsoft.Build.Framework.MessageImportance)">
            <summary>
            This constructor allows all event data to be initialized
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="importance">importance of the message</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildMessageEventArgs.#ctor(System.String,System.String,System.String,Microsoft.Build.Framework.MessageImportance,System.DateTime)">
            <summary>
            This constructor allows a timestamp to be set
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="importance">importance of the message</param>
            <param name="eventTimestamp">Timestamp when event was created</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildMessageEventArgs.#ctor(System.String,System.String,System.String,Microsoft.Build.Framework.MessageImportance,System.DateTime,System.Object[])">
            <summary>
            This constructor allows a timestamp to be set
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="importance">importance of the message</param>
            <param name="eventTimestamp">Timestamp when event was created</param>
            <param name="messageArgs">message arguments</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildMessageEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,Microsoft.Build.Framework.MessageImportance)">
            <summary>
            This constructor allows all event data to be initialized
            </summary>
            <param name="subcategory">event subcategory</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="importance">importance of the message</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildMessageEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,Microsoft.Build.Framework.MessageImportance,System.DateTime)">
            <summary>
            This constructor allows timestamp to be set
            </summary>
            <param name="subcategory">event subcategory</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="importance">importance of the message</param>
            <param name="eventTimestamp">custom timestamp for the event</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildMessageEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,Microsoft.Build.Framework.MessageImportance,System.DateTime,System.Object[])">
            <summary>
            This constructor allows timestamp to be set
            </summary>
            <param name="subcategory">event subcategory</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="importance">importance of the message</param>
            <param name="eventTimestamp">custom timestamp for the event</param>
            <param name="messageArgs">message arguments</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildMessageEventArgs.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Serializes to a stream through a binary writer
            </summary>
            <param name="writer">Binary writer which is attached to the stream the event will be serialized into</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildMessageEventArgs.CreateFromStream(System.IO.BinaryReader,System.Int32)">
            <summary>
            Deserializes from a stream through a binary reader
            </summary>
            <param name="reader">Binary reader which is attached to the stream the event will be deserialized from</param>
            <param name="version">The version of the runtime the message packet was created from</param>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildMessageEventArgs.Importance">
            <summary>
            Importance of the message
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildMessageEventArgs.Subcategory">
            <summary>
            The custom sub-type of the event.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildMessageEventArgs.Code">
            <summary>
            Code associated with event. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildMessageEventArgs.File">
            <summary>
            File associated with event.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildMessageEventArgs.LineNumber">
            <summary>
            Line number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildMessageEventArgs.ColumnNumber">
            <summary>
            Column number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildMessageEventArgs.EndLineNumber">
            <summary>
            Ending line number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildMessageEventArgs.EndColumnNumber">
            <summary>
            Ending column number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildMessageEventArgs.ProjectFile">
            <summary>
            The project which was building when the message was issued.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildStartedEventArgs">
            <summary>
            Arguments for build started events.
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildStartedEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildStartedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor to initialize all parameters.
            Sender field cannot be set here and is assumed to be "MSBuild"
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildStartedEventArgs.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Constructor to initialize all parameters.
            Sender field cannot be set here and is assumed to be "MSBuild"
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="environmentOfBuild">A dictionary which lists the environment of the build when the build is started.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildStartedEventArgs.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Constructor to allow timestamp to be set
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildStartedEventArgs.#ctor(System.String,System.String,System.DateTime,System.Object[])">
            <summary>
            Constructor to allow timestamp to be set
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
            <param name="messageArgs">message args</param>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildStartedEventArgs.BuildEnvironment">
            <summary>
            The environment which is used at the start of the build
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildStatusEventArgs">
            <summary> 
            Base class for build status events.  This class is meant
            to be extended.  
            </summary> 
            <remarks> 
            WARNING: marking a type [Serializable] without implementing 
            ISerializable imposes a serialization contract -- it is a 
            promise to never change the type's fields i.e. the type is 
            immutable; adding new fields in the next version of the type 
            without following certain special FX guidelines, can break both 
            forward and backward compatibility 
            </remarks> 
        </member>
        <member name="M:Microsoft.Build.Framework.BuildStatusEventArgs.#ctor">
            <summary> 
            Default constructor 
            </summary> 
        </member>
        <member name="M:Microsoft.Build.Framework.BuildStatusEventArgs.#ctor(System.String,System.String,System.String)">
            <summary> 
            This constructor allows event data to be initialized.  
            </summary> 
            <param name="message">text message</param> 
            <param name="helpKeyword">help keyword </param> 
            <param name="senderName">name of event sender</param> 
        </member>
        <member name="M:Microsoft.Build.Framework.BuildStatusEventArgs.#ctor(System.String,System.String,System.String,System.DateTime)">
            <summary> 
            This constructor allows timestamp to be set
            </summary> 
            <param name="message">text message</param> 
            <param name="helpKeyword">help keyword </param> 
            <param name="senderName">name of event sender</param> 
            <param name="eventTimestamp">Timestamp when event was created</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildStatusEventArgs.#ctor(System.String,System.String,System.String,System.DateTime,System.Object[])">
            <summary> 
            This constructor allows timestamp to be set
            </summary> 
            <param name="message">text message</param> 
            <param name="helpKeyword">help keyword </param> 
            <param name="senderName">name of event sender</param> 
            <param name="eventTimestamp">Timestamp when event was created</param>
            <param name="messageArgs">Optional arguments for formatting the message string.</param>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildWarningEventArgs">
            <summary>
            Arguments for warning events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildWarningEventArgs.#ctor">
            <summary>
            Default constructor 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildWarningEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            This constructor allows all event data to be initialized
            </summary>
            <param name="subcategory">event subcategory</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildWarningEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.DateTime)">
            <summary>
            This constructor allows timestamp to be set
            </summary>
            <param name="subcategory">event subcategory</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="eventTimestamp">custom timestamp for the event</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildWarningEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.DateTime,System.Object[])">
            <summary>
            This constructor allows timestamp to be set
            </summary>
            <param name="subcategory">event subcategory</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="eventTimestamp">custom timestamp for the event</param>
            <param name="messageArgs">message arguments</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildWarningEventArgs.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Serializes the Errorevent to a stream through a binary writer
            </summary>
            <param name="writer">Binary writer which is attached to the stream the event will be serialized into</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildWarningEventArgs.CreateFromStream(System.IO.BinaryReader,System.Int32)">
            <summary>
            Deserializes from a stream through a binary reader
            </summary>
            <param name="reader">Binary reader which is attached to the stream the event will be deserialized from</param>
            <param name="version">The version of the runtime the message packet was created from</param>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildWarningEventArgs.Subcategory">
            <summary>
            The custom sub-type of the event.         
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildWarningEventArgs.Code">
            <summary>
            Code associated with event. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildWarningEventArgs.File">
            <summary>
            File associated with event.   
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildWarningEventArgs.LineNumber">
            <summary>
            Line number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildWarningEventArgs.ColumnNumber">
            <summary>
            Column number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildWarningEventArgs.EndLineNumber">
            <summary>
            Ending line number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildWarningEventArgs.EndColumnNumber">
            <summary>
            Ending column number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildWarningEventArgs.ProjectFile">
            <summary>
            The project which was building when the message was issued.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.CriticalBuildMessageEventArgs">
            <summary>
            Arguments for critical message events. These always have High importance.
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.CriticalBuildMessageEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            This constructor allows all event data to be initialized
            </summary>
            <param name="subcategory">event subcategory</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
        </member>
        <member name="M:Microsoft.Build.Framework.CriticalBuildMessageEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.DateTime)">
            <summary>
            This constructor allows timestamp to be set
            </summary>
            <param name="subcategory">event subcategory</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="eventTimestamp">custom timestamp for the event</param>
        </member>
        <member name="M:Microsoft.Build.Framework.CriticalBuildMessageEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.DateTime,System.Object[])">
            <summary>
            This constructor allows timestamp to be set
            </summary>
            <param name="subcategory">event subcategory</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="eventTimestamp">custom timestamp for the event</param>
            <param name="messageArgs">message arguments</param>
        </member>
        <member name="M:Microsoft.Build.Framework.CriticalBuildMessageEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.CustomBuildEventArgs">
            <summary>
            Arguments for custom build events.
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.CustomBuildEventArgs.#ctor">
            <summary>
            Default constructor 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.CustomBuildEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            This constructor allows event data to be initialized.
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of sender</param>
        </member>
        <member name="M:Microsoft.Build.Framework.CustomBuildEventArgs.#ctor(System.String,System.String,System.String,System.DateTime)">
            <summary>
            This constructor allows event data to be initialized including timestamp.
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of sender</param>
            <param name="eventTimestamp">Timestamp when event was created</param>
        </member>
        <member name="M:Microsoft.Build.Framework.CustomBuildEventArgs.#ctor(System.String,System.String,System.String,System.DateTime,System.Object[])">
            <summary>
            This constructor allows event data to be initialized including timestamp.
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of sender</param>
            <param name="eventTimestamp">Timestamp when event was created</param>
            <param name="messageArgs">Message arguments</param>
        </member>
        <member name="T:Microsoft.Build.Framework.EnvironmentVariableReadEventArgs">
            <summary>
            Arguments for the environment variable read event.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.EnvironmentVariableReadEventArgs.#ctor">
            <summary>
            Initializes an instance of the EnvironmentVariableReadEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.EnvironmentVariableReadEventArgs.#ctor(System.String,System.String,System.String,System.String,Microsoft.Build.Framework.MessageImportance)">
            <summary>
            Initializes an instance of the EnvironmentVariableReadEventArgs class.
            </summary>
            <param name="environmentVariableName">The name of the environment variable that was read.</param>
        </member>
        <member name="P:Microsoft.Build.Framework.EnvironmentVariableReadEventArgs.EnvironmentVariableName">
            <summary>
            The name of the environment variable that was read.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.ExternalProjectFinishedEventArgs">
            <summary>
            Arguments for external project finished events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.ExternalProjectFinishedEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ExternalProjectFinishedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Useful constructor
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword</param>
            <param name="senderName">name of the object sending this event</param>
            <param name="projectFile">project name</param>
            <param name="succeeded">true indicates project built successfully</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ExternalProjectFinishedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.DateTime)">
            <summary>
            Useful constructor including the ability to set the timestamp
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword</param>
            <param name="senderName">name of the object sending this event</param>
            <param name="projectFile">project name</param>
            <param name="succeeded">true indicates project built successfully</param>
            <param name="eventTimestamp">Timestamp when event was created</param>
        </member>
        <member name="P:Microsoft.Build.Framework.ExternalProjectFinishedEventArgs.ProjectFile">
            <summary>
            Project name
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ExternalProjectFinishedEventArgs.Succeeded">
            <summary>
            True if project built successfully, false otherwise
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.ExternalProjectStartedEventArgs">
            <summary>
            Arguments for external project started events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.ExternalProjectStartedEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ExternalProjectStartedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Useful constructor
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword</param>
            <param name="senderName">name of the object sending this event</param>
            <param name="projectFile">project name</param>
            <param name="targetNames">targets we are going to build (empty indicates default targets)</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ExternalProjectStartedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Useful constructor, including the ability to set the timestamp of the event
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword</param>
            <param name="senderName">name of the object sending this event</param>
            <param name="projectFile">project name</param>
            <param name="targetNames">targets we are going to build (empty indicates default targets)</param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
        </member>
        <member name="P:Microsoft.Build.Framework.ExternalProjectStartedEventArgs.ProjectFile">
            <summary>
            Project name
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ExternalProjectStartedEventArgs.TargetNames">
            <summary>
            Targets that we will build in the project. This may mean different things for different project types,
            our tasks will put something like Rebuild, Clean, etc. here. This may be null if the project is being
            built with the default target.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.IBuildEngine">
            <summary>
            This interface exposes functionality on the build engine
            that is required for task authoring.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine.LogErrorEvent(Microsoft.Build.Framework.BuildErrorEventArgs)">
            <summary>
            Allows tasks to raise error events to all registered loggers.
            The build engine may perform some filtering or
            pre-processing on the events, before dispatching them.
            </summary>
            <param name="e">Details of event to raise.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine.LogWarningEvent(Microsoft.Build.Framework.BuildWarningEventArgs)">
            <summary>
            Allows tasks to raise warning events to all registered loggers.
            The build engine may perform some filtering or
            pre-processing on the events, before dispatching them.
            </summary>
            <param name="e">Details of event to raise.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine.LogMessageEvent(Microsoft.Build.Framework.BuildMessageEventArgs)">
            <summary>
            Allows tasks to raise message events to all registered loggers.
            The build engine may perform some filtering or
            pre-processing on the events, before dispatching them.
            </summary>
            <param name="e">Details of event to raise.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine.LogCustomEvent(Microsoft.Build.Framework.CustomBuildEventArgs)">
            <summary>
            Allows tasks to raise custom events to all registered loggers.
            The build engine may perform some filtering or
            pre-processing on the events, before dispatching them.
            </summary>
            <param name="e">Details of event to raise.</param>
        </member>
        <member name="P:Microsoft.Build.Framework.IBuildEngine.ContinueOnError">
            <summary>
            Returns true if the ContinueOnError flag was set to true for this particular task
            in the project file.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.IBuildEngine.LineNumberOfTaskNode">
            <summary>
            Retrieves the line number of the task node within the project file that called it.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.IBuildEngine.ColumnNumberOfTaskNode">
            <summary>
            Retrieves the line number of the task node within the project file that called it.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.IBuildEngine.ProjectFileOfTaskNode">
            <summary>
            Returns the full path to the project file that contained the call to this task.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine.BuildProjectFile(System.String,System.String[],System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            This method allows tasks to initiate a build on a
            particular project file. If the build is successful, the outputs
            (if any) of the specified targets are returned.
            </summary>
            <remarks>
            1) it is acceptable to pass null for both <c>targetNames</c> and <c>targetOutputs</c>
            2) if no targets are specified, the default targets are built
            3) target outputs are returned as <c>ITaskItem</c> arrays indexed by target name
            </remarks>
            <param name="projectFileName">The project to build.</param>
            <param name="targetNames">The targets in the project to build (can be null).</param>
            <param name="globalProperties">A hash table of additional global properties to apply
                to the child project (can be null).  The key and value should both be strings.</param>
            <param name="targetOutputs">The outputs of each specified target (can be null).</param>
            <returns>true, if build was successful</returns>
        </member>
        <member name="T:Microsoft.Build.Framework.IBuildEngine2">
            <summary>
            This interface extends IBuildEngine to provide a method allowing building 
            project files in parallel.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.IBuildEngine2.IsRunningMultipleNodes">
            <summary>
            This property allows a task to query whether or not the system is running in single process mode or multi process mode.
            Single process mode (IsRunningMultipleNodes = false) is where the engine is initialized with the number of cpus = 1 and the engine is not a child engine.
            The engine is in multi process mode (IsRunningMultipleNodes = true) when the engine is initialized with a number of cpus > 1 or the engine is a child engine.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine2.BuildProjectFile(System.String,System.String[],System.Collections.IDictionary,System.Collections.IDictionary,System.String)">
            <summary>
            This method allows tasks to initiate a build on a
            particular project file. If the build is successful, the outputs
            (if any) of the specified targets are returned.
            </summary>
            <remarks>
            1) it is acceptable to pass null for both <c>targetNames</c> and <c>targetOutputs</c>
            2) if no targets are specified, the default targets are built
            3) target outputs are returned as <c>ITaskItem</c> arrays indexed by target name
            </remarks>
            <param name="projectFileName">The project to build.</param>
            <param name="targetNames">The targets in the project to build (can be null).</param>
            <param name="globalProperties">A hash table of additional global properties to apply
                to the child project (can be null).  The key and value should both be strings.</param>
            <param name="targetOutputs">The outputs of each specified target (can be null).</param>
            <param name="toolsVersion">A tools version recognized by the Engine that will be used during this build (can be null).</param>
            <returns>true, if build was successful</returns>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine2.BuildProjectFilesInParallel(System.String[],System.String[],System.Collections.IDictionary[],System.Collections.IDictionary[],System.String[],System.Boolean,System.Boolean)">
            <summary>
            This method allows tasks to initiate a build on a
            particular project file. If the build is successful, the outputs
            (if any) of the specified targets are returned.
            </summary>
            <remarks>
            1) it is acceptable to pass null for both <c>targetNames</c> and <c>targetOutputs</c>
            2) if no targets are specified, the default targets are built
            3) target outputs are returned as <c>ITaskItem</c> arrays indexed by target name
            </remarks>
            <param name="projectFileNames">The project to build.</param>
            <param name="targetNames">The targets in the project to build (can be null).</param>
            <param name="globalProperties">An array of hashtables of additional global properties to apply
                to the child project (array entries can be null). 
                The key and value in the hashtable should both be strings.</param>
            <param name="targetOutputsPerProject">The outputs of each specified target (can be null).</param>
            <param name="toolsVersion">A tools version recognized by the Engine that will be used during this build (can be null).</param>
            <param name="useResultsCache">If true the operation will only be run if the cache doesn't
                                          already contain the result. After the operation the result is
                                          stored in the cache </param>
            <param name="unloadProjectsOnCompletion">If true the project will be unloaded once the 
                                                    operation is completed </param>
            <returns>true, if build was successful</returns>
        </member>
        <member name="T:Microsoft.Build.Framework.IBuildEngine3">
            <summary>
            This interface extends IBuildEngine to provide a method allowing building 
            project files in parallel.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine3.BuildProjectFilesInParallel(System.String[],System.String[],System.Collections.IDictionary[],System.Collections.Generic.IList{System.String}[],System.String[],System.Boolean)">
            <summary>
            This method allows tasks to initiate a build on a
            particular project file. If the build is successful, the outputs
            (if any) of the specified targets are returned.
            </summary>
            <remarks>
            1) it is acceptable to pass null for both <c>targetNames</c> and <c>targetOutputs</c>
            2) if no targets are specified, the default targets are built
            
            </remarks>
            <param name="projectFileNames">The project to build.</param>
            <param name="targetNames">The targets in the project to build (can be null).</param>
            <param name="globalProperties">An array of hashtables of additional global properties to apply
                to the child project (array entries can be null). 
                The key and value in the hashtable should both be strings.</param>
            <param name="removeGlobalProperties">A list of global properties which should be removed.</param>
            <param name="toolsVersion">A tools version recognized by the Engine that will be used during this build (can be null).</param>
            <param name="returnTargetOutputs">Should the target outputs be returned in the BuildEngineResult</param>
            <returns>Returns a structure containing the success or failure of the build and the target outputs by project.</returns>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine3.Yield">
            <summary>
            Informs the system that this task has a long-running out-of-process component and other work can be done in the
            build while that work completes.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine3.Reacquire">
            <summary>
            Waits to reacquire control after yielding.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.RegisteredTaskObjectLifetime">
            <summary>
            Defines the lifetime of a registered task object.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.RegisteredTaskObjectLifetime.Build">
            <summary>
            The registered object will be disposed when the build ends.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.RegisteredTaskObjectLifetime.AppDomain">
            <summary>
            The registered object will be disposed when the AppDomain is unloaded.
            </summary>
            <remarks>
            The AppDomain to which this refers is the one in which MSBuild was launched,
            not the one in which the Task was launched.
            </remarks>
        </member>
        <member name="T:Microsoft.Build.Framework.IBuildEngine4">
            <summary>
            This interface extends IBuildEngine to provide a mechanism allowing tasks to 
            share data between task invocations.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine4.RegisterTaskObject(System.Object,System.Object,Microsoft.Build.Framework.RegisteredTaskObjectLifetime,System.Boolean)">
            <summary>
            Registers an object with the system that will be disposed of at some specified time
            in the future.
            </summary>
            <param name="key">The key used to retrieve the object.</param>
            <param name="obj">The object to be held for later disposal.</param>
            <param name="lifetime">The lifetime of the object.</param>
            <param name="allowEarlyCollection">The object may be disposed earlier that the requested time if
            MSBuild needs to reclaim memory.</param>
            <remarks>
            <para>
            This method may be called by tasks which need to maintain state across task invocations,
            such as to cache data which may be expensive to generate but which is known not to change during the 
            build.  It is strongly recommended that <paramref name="allowEarlyCollection"/> be set to true if the
            object will retain any significant amount of data, as this gives MSBuild the most flexibility to 
            manage limited process memory resources.
            </para>
            <para>
            The thread on which the object is disposed may be arbitrary - however it is guaranteed not to
            be disposed while the task is executing, even if <paramref name="allowEarlyCollection"/> is set
            to true.
            </para>
            <para>
            If the object implements IDisposable, IDisposable.Dispose will be invoked on the object before
            discarding it.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine4.GetRegisteredTaskObject(System.Object,Microsoft.Build.Framework.RegisteredTaskObjectLifetime)">
            <summary>
            Retrieves a previously registered task object stored with the specified key.
            </summary>
            <param name="key">The key used to retrieve the object.</param>
            <param name="lifetime">The lifetime of the object.</param>
            <returns>
            The registered object, or null is there is no object registered under that key or the object
            has been discarded through early collection.
            </returns>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine4.UnregisterTaskObject(System.Object,Microsoft.Build.Framework.RegisteredTaskObjectLifetime)">
            <summary>
            Unregisters a previously-registered task object.
            </summary>
            <param name="key">The key used to retrieve the object.</param>
            <param name="lifetime">The lifetime of the object.</param>
            <returns>
            The registered object, or null is there is no object registered under that key or the object
            has been discarded through early collection.
            </returns>
        </member>
        <member name="T:Microsoft.Build.Framework.IBuildEngine5">
            <summary>
            This interface extends IBuildEngine to log telemetry.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine5.LogTelemetry(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Logs telemetry.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="properties">The event properties.</param>
        </member>
        <member name="T:Microsoft.Build.Framework.IBuildEngine6">
            <summary>
            This interface extends <see cref="T:Microsoft.Build.Framework.IBuildEngine5" /> to allow tasks to get the current project's global properties.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine6.GetGlobalProperties">
            <summary>
            Gets the global properties for the current project.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> containing the global properties of the current project.</returns>
        </member>
        <member name="T:Microsoft.Build.Framework.ICancelableTask">
            <summary>
            Interface for tasks which can be cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ICancelableTask.Cancel">
            <summary>
            Instructs the task to exit as soon as possible, or to immediately exit if Execute is invoked after this method.
            </summary>
            <remarks>
            Cancel() may be called at any time after the task has been instantiated, even before <see cref="M:Microsoft.Build.Framework.ITask.Execute"/> is called.
            Cancel calls may come in from any thread.  The implementation of this method should not block indefinitely.
            </remarks>
        </member>
        <member name="T:Microsoft.Build.Framework.IEventRedirector">
            <summary>
            This interface is used to forward events to another loggers
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IEventRedirector.ForwardEvent(Microsoft.Build.Framework.BuildEventArgs)">
            <summary>
            This method is called by the node loggers to forward the events to central logger
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildMessageEventHandler">
            <summary>
            Type of handler for MessageRaised events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildErrorEventHandler">
            <summary>
            Type of handler for ErrorRaised events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildWarningEventHandler">
            <summary>
            Type of handler for WarningRaised events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.CustomBuildEventHandler">
            <summary>
            Type of handler for CustomEventRaised events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildStartedEventHandler">
            <summary>
            Type of handler for BuildStartedEvent events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildFinishedEventHandler">
            <summary>
            Type of handler for BuildFinishedEvent events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.ProjectStartedEventHandler">
            <summary>
            Type of handler for ProjectStarted events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.ProjectFinishedEventHandler">
            <summary>
            Type of handler for ProjectFinished events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TargetStartedEventHandler">
            <summary>
            Type of handler for TargetStarted events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TargetFinishedEventHandler">
            <summary>
            Type of handler for TargetFinished events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TaskStartedEventHandler">
            <summary>
            Type of handler for TaskStarted events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TaskFinishedEventHandler">
            <summary>
            Type of handler for TaskFinished events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildStatusEventHandler">
            <summary>
            Type of handler for BuildStatus events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.AnyEventHandler">
            <summary>
            Type of handler for AnyEventRaised events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.IEventSource">
            <summary> 
            This interface defines the events raised by the build engine.
            Loggers use this interface to subscribe to the events they
            are interested in receiving.
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.MessageRaised">
            <summary>
            this event is raised to log a message
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.ErrorRaised">
            <summary>
            this event is raised to log an error
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.WarningRaised">
            <summary>
            this event is raised to log a warning
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.BuildStarted">
            <summary>
            this event is raised to log the start of a build
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.BuildFinished">
            <summary>
            this event is raised to log the end of a build
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.ProjectStarted">
            <summary>
            this event is raised to log the start of a project build
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.ProjectFinished">
            <summary>
            this event is raised to log the end of a project build
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.TargetStarted">
            <summary>
            this event is raised to log the start of a target build
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.TargetFinished">
            <summary>
            this event is raised to log the end of a target build
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.TaskStarted">
            <summary>
            this event is raised to log the start of task execution
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.TaskFinished">
            <summary>
            this event is raised to log the end of task execution
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.CustomEventRaised">
            <summary>
            this event is raised to log custom events
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.StatusEventRaised">
            <summary>
            this event is raised to log any build status event
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.AnyEventRaised">
            <summary>
            this event is raised to log any build event.  These events do not include telemetry.  To receive telemetry, you must attach to the <see cref="E:Microsoft.Build.Framework.IEventSource2.TelemetryLogged"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TelemetryEventHandler">
            <summary>
            Type of handler for TelemetryLogged events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.IEventSource2">
            <summary>
            This interface defines the events raised by the build engine.
            Loggers use this interface to subscribe to the events they
            are interested in receiving.
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource2.TelemetryLogged">
            <summary>
            this event is raised to when telemetry is logged.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.IEventSource3">
            <summary>
            This interface defines the events raised by the build engine.
            Loggers use this interface to subscribe to the events they
            are interested in receiving.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IEventSource3.IncludeEvaluationMetaprojects">
            <summary>
            Should evaluation events include generated metaprojects?
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IEventSource3.IncludeEvaluationProfiles">
            <summary>
            Should evaluation events include profiling information?
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IEventSource3.IncludeTaskInputs">
            <summary>
            Should task events include task inputs?
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.IForwardingLogger">
            <summary>
            This interface extends the ILogger interface to provide a property which can be used to forward events
            to a logger running in a different process. It can also be used create filtering loggers.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.IForwardingLogger.BuildEventRedirector">
            <summary>
            This property is set by the build engine to allow a node loggers to forward messages to the
            central logger
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.IForwardingLogger.NodeId">
            <summary>
            This property is set by the build engine or node to inform the forwarding logger which node it is running on
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.IGeneratedTask">
            <summary>
            An interface implemented by tasks that are generated by ITaskFactory instances.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IGeneratedTask.SetPropertyValue(Microsoft.Build.Framework.TaskPropertyInfo,System.Object)">
            <summary>
            Sets a value on a property of this task instance.
            </summary>
            <param name="property">The property to set.</param>
            <param name="value">The value to set. The caller is responsible to type-coerce this value to match the property's <see cref="P:Microsoft.Build.Framework.TaskPropertyInfo.PropertyType"/>.</param>
            <remarks>
            All exceptions from this method will be caught in the taskExecution host and logged as a fatal task error
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.IGeneratedTask.GetPropertyValue(Microsoft.Build.Framework.TaskPropertyInfo)">
            <summary>
            Gets the property value.
            </summary>
            <param name="property">The property to get.</param>
            <returns>
            The value of the property, the value's type will match the type given by <see cref="P:Microsoft.Build.Framework.TaskPropertyInfo.PropertyType"/>.
            </returns>
            <remarks>
            MSBuild calls this method after executing the task to get output parameters.
            All exceptions from this method will be caught in the taskExecution host and logged as a fatal task error
            </remarks>
        </member>
        <member name="T:Microsoft.Build.Framework.LoggerVerbosity">
            <summary>
            Enumeration of the levels of detail of an event log.
            </summary>
            <remarks>
            The level of detail (i.e. verbosity) of an event log is entirely controlled by the logger generating the log -- a logger
            will be directed to keep its verbosity at a certain level, based on user preferences, but a logger is free to choose the
            events it logs for each verbosity level.
            
            LOGGING GUIDELINES FOR EACH VERBOSITY LEVEL:
            1) Quiet -- only display a summary at the end of build
            2) Minimal -- only display errors, warnings, high importance events and a build summary
            3) Normal -- display all errors, warnings, high importance events, some status events, and a build summary
            4) Detailed -- display all errors, warnings, high and normal importance events, all status events, and a build summary
            5) Diagnostic -- display all events, and a build summary
            
            WARNING: VS Automation code for the Tools/Options MSBuild build verbosity setting will be broken
            by changes to this enum (not to mention existing MSBuild clients and vsproject code). 
            Please make sure to talk to automation devs before changing it.
            </remarks>
        </member>
        <member name="F:Microsoft.Build.Framework.LoggerVerbosity.Quiet">
            <summary>
            The most minimal output
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.LoggerVerbosity.Minimal">
            <summary>
            Relatively little output
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.LoggerVerbosity.Normal">
            <summary>
            Standard output. This should be the default if verbosity level is not set
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.LoggerVerbosity.Detailed">
            <summary>
            Relatively verbose, but not exhaustive
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.LoggerVerbosity.Diagnostic">
            <summary>
            The most verbose and informative verbosity
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.ILogger">
            <summary>
            This interface defines a "logger" in the build system. A logger subscribes to build system events. All logger classes must
            implement this interface to be recognized by the build engine.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ILogger.Verbosity">
            <summary>
            The verbosity level directs the amount of detail that appears in a logger's event log. Though this is only a
            recommendation based on user preferences, and a logger is free to choose the exact events it logs, it is still
            important that the guidelines for each level be followed, for a good user experience.
            </summary>
            <value>The verbosity level.</value>
        </member>
        <member name="P:Microsoft.Build.Framework.ILogger.Parameters">
            <summary>
            This property holds the user-specified parameters to the logger. If parameters are not provided, a logger should revert
            to defaults. If a logger does not take parameters, it can ignore this property.
            </summary>
            <value>The parameter string (can be null).</value>
        </member>
        <member name="M:Microsoft.Build.Framework.ILogger.Initialize(Microsoft.Build.Framework.IEventSource)">
            <summary>
            Called by the build engine to allow loggers to subscribe to the events they desire.
            </summary>
            <param name="eventSource">The events available to loggers.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ILogger.Shutdown">
            <summary>
            Called by the build engine to allow loggers to release any resources they may have allocated at initialization time,
            or during the build.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.INodeLogger">
            <summary>
            This interface defines a "parallel aware logger" in the build system. A parallel aware logger 
            will accept a cpu count and be aware that any cpu count greater than 1 means the events will
            be received from the logger from each cpu as the events are logged. 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.INodeLogger.Initialize(Microsoft.Build.Framework.IEventSource,System.Int32)">
            <summary>
            Initializes the current <see cref="T:Microsoft.Build.Framework.INodeLogger"/> instance.
            </summary>
            <param name="eventSource"></param>
            <param name="nodeCount"></param>
        </member>
        <member name="T:Microsoft.Build.Framework.IProjectElement">
            <summary>
            Interface for exposing a ProjectElement to the appropriate loggers
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.IProjectElement.ElementName">
            <summary>
            Gets the name of the associated element. 
            Useful for display in some circumstances.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.IProjectElement.OuterElement">
            <summary>
            The outer markup associated with this project element
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.ITask">
            <summary>
            This interface defines a "task" in the build system. A task is an atomic unit of build operation. All task classes must
            implement this interface to be recognized by the build engine.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ITask.BuildEngine">
            <summary>
            This property is set by the build engine to allow a task to call back into it.
            </summary>
            <value>The interface on the build engine available to tasks.</value>
        </member>
        <member name="P:Microsoft.Build.Framework.ITask.HostObject">
            <summary>
            The build engine sets this property if the host IDE has associated a host object with this particular task.
            </summary>
            <value>The host object instance (can be null).</value>
        </member>
        <member name="M:Microsoft.Build.Framework.ITask.Execute">
            <summary>
            This method is called by the build engine to begin task execution. A task uses the return value to indicate
            whether it was successful. If a task throws an exception out of this method, the engine will automatically
            assume that the task has failed.
            </summary>
            <returns>true, if successful</returns>
        </member>
        <member name="T:Microsoft.Build.Framework.ITaskFactory">
            <summary>
            Interface that a task factory Instance should implement
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ITaskFactory.FactoryName">
            <summary>
            Gets the name of the factory.
            </summary>
            <value>The name of the factory.</value>
        </member>
        <member name="P:Microsoft.Build.Framework.ITaskFactory.TaskType">
            <summary>
            Gets the type of the task this factory will instantiate.  Implementations must return a value for this property.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskFactory.Initialize(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo},System.String,Microsoft.Build.Framework.IBuildEngine)">
            <summary>
            Initializes this factory for instantiating tasks with a particular inline task block.
            </summary>
            <param name="taskName">Name of the task.</param>
            <param name="parameterGroup">The parameter group.</param>
            <param name="taskBody">The task body.</param>
            <param name="taskFactoryLoggingHost">The task factory logging host.</param>
            <returns>A value indicating whether initialization was successful.</returns>
            <remarks>
            <para>MSBuild engine will call this to initialize the factory. This should initialize the factory enough so that the factory can be asked
            whether or not task names can be created by the factory.</para>
            <para>
            The taskFactoryLoggingHost will log messages in the context of the target where the task is first used.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskFactory.GetTaskParameters">
            <summary>
            Get the descriptions for all the task's parameters.
            </summary>
            <returns>A non-null array of property descriptions.</returns>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskFactory.CreateTask(Microsoft.Build.Framework.IBuildEngine)">
            <summary>
            Create an instance of the task to be used.
            </summary>
            <param name="taskFactoryLoggingHost">
            The task factory logging host will log messages in the context of the task.
            </param>
            <returns>
            The generated task, or <c>null</c> if the task failed to be created.
            </returns>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskFactory.CleanupTask(Microsoft.Build.Framework.ITask)">
            <summary>
            Cleans up any context or state that may have been built up for a given task.
            </summary>
            <param name="task">The task to clean up.</param>
            <remarks>
            For many factories, this method is a no-op.  But some factories may have built up
            an AppDomain as part of an individual task instance, and this is their opportunity
            to shutdown the AppDomain.
            </remarks>
        </member>
        <member name="T:Microsoft.Build.Framework.ITaskFactory2">
            <summary>
            Interface that a task factory Instance should implement if it wants to be able to
            use new UsingTask parameters such as Runtime and Architecture. 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskFactory2.Initialize(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo},System.String,Microsoft.Build.Framework.IBuildEngine)">
            <summary>
            Initializes this factory for instantiating tasks with a particular inline task block and a set of UsingTask parameters.  MSBuild
            provides an implementation of this interface, TaskHostFactory, that uses "Runtime", with values "CLR2", "CLR4", "CurrentRuntime", 
            and "*" (Any); and "Architecture", with values "x86", "x64", "CurrentArchitecture", and "*" (Any).  An implementer of ITaskFactory2 
            can choose to use these pre-defined Runtime and Architecture values, or can specify new values for these parameters.  
            </summary>
            <param name="taskName">Name of the task.</param>
            <param name="factoryIdentityParameters">Special parameters that the task factory can use to modify how it executes tasks, 
            such as Runtime and Architecture.  The key is the name of the parameter and the value is the parameter's value. This 
            is the set of parameters that was set on the UsingTask using e.g. the UsingTask Runtime and Architecture parameters.</param>
            <param name="parameterGroup">The parameter group.</param>
            <param name="taskBody">The task body.</param>
            <param name="taskFactoryLoggingHost">The task factory logging host.</param>
            <returns>A value indicating whether initialization was successful.</returns>
            <remarks>
            <para>MSBuild engine will call this to initialize the factory. This should initialize the factory enough so that the 
            factory can be asked whether or not task names can be created by the factory.  If a task factory implements ITaskFactory2, 
            this Initialize method will be called in place of ITaskFactory.Initialize.</para>
            <para>
            The taskFactoryLoggingHost will log messages in the context of the target where the task is first used.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskFactory2.CreateTask(Microsoft.Build.Framework.IBuildEngine,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Create an instance of the task to be used, with an optional set of "special" parameters set on the individual task invocation using 
            the MSBuildRuntime and MSBuildArchitecture default task parameters.  MSBuild provides an implementation of this interface, 
            TaskHostFactory, that uses "MSBuildRuntime", with values "CLR2", "CLR4", "CurrentRuntime", and "*" (Any); and "MSBuildArchitecture", 
            with values "x86", "x64", "CurrentArchitecture", and "*" (Any).  An implementer of ITaskFactory2 can choose to use these pre-defined 
            MSBuildRuntime and MSBuildArchitecture values, or can specify new values for these parameters.  
            </summary>
            <param name="taskFactoryLoggingHost">
            The task factory logging host will log messages in the context of the task.
            </param>
            <param name="taskIdentityParameters">
            Special parameters that the task factory can use to modify how it executes tasks, such as Runtime and Architecture.  
            The key is the name of the parameter and the value is the parameter's value.  This is the set of parameters that was 
            set to the task invocation itself, via e.g. the special MSBuildRuntime and MSBuildArchitecture parameters.  
            </param>
            <remarks>
            If a task factory implements ITaskFactory2, MSBuild will call this method instead of ITaskFactory.CreateTask.  
            </remarks>
            <returns>
            The generated task, or <c>null</c> if the task failed to be created.
            </returns>
        </member>
        <member name="T:Microsoft.Build.Framework.ITaskHost">
            <summary>
            This empty interface is used to pass host objects from an IDE to individual
            tasks.  Depending on the task itself and what kinds parameters and functionality
            it exposes, the task should define its own interface that inherits from this one, 
            and then use that interface to communicate with the host.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.ITaskItem">
            <summary>
            This interface defines a project item that can be consumed and emitted by tasks.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ITaskItem.ItemSpec">
            <summary>
            Gets or sets the item "specification" e.g. for disk-based items this would be the file path.
            </summary>
            <remarks>
            This should be named "EvaluatedInclude" but that would be a breaking change to this interface.
            </remarks>
            <value>The item-spec string.</value>
        </member>
        <member name="P:Microsoft.Build.Framework.ITaskItem.MetadataNames">
            <summary>
            Gets the names of all the metadata on the item.
            Includes the built-in metadata like "FullPath".
            </summary>
            <value>The list of metadata names.</value>
        </member>
        <member name="P:Microsoft.Build.Framework.ITaskItem.MetadataCount">
            <summary>
            Gets the number of pieces of metadata on the item. Includes
            both custom and built-in metadata.
            </summary>
            <value>Count of pieces of metadata.</value>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskItem.GetMetadata(System.String)">
            <summary>
            Allows the values of metadata on the item to be queried.
            </summary>
            <param name="metadataName">The name of the metadata to retrieve.</param>
            <returns>The value of the specified metadata.</returns>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskItem.SetMetadata(System.String,System.String)">
            <summary>
            Allows a piece of custom metadata to be set on the item.
            </summary>
            <param name="metadataName">The name of the metadata to set.</param>
            <param name="metadataValue">The metadata value.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskItem.RemoveMetadata(System.String)">
            <summary>
            Allows the removal of custom metadata set on the item.
            </summary>
            <param name="metadataName">The name of the metadata to remove.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskItem.CopyMetadataTo(Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Allows custom metadata on the item to be copied to another item.
            </summary>
            <remarks>
            RECOMMENDED GUIDELINES FOR METHOD IMPLEMENTATIONS:
            1) this method should NOT copy over the item-spec
            2) if a particular piece of metadata already exists on the destination item, it should NOT be overwritten
            3) if there are pieces of metadata on the item that make no semantic sense on the destination item, they should NOT be copied
            </remarks>
            <param name="destinationItem">The item to copy metadata to.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskItem.CloneCustomMetadata">
            <summary>
            Get the collection of custom metadata. This does not include built-in metadata.
            </summary>
            <remarks>
            RECOMMENDED GUIDELINES FOR METHOD IMPLEMENTATIONS:
            1) this method should return a clone of the metadata
            2) writing to this dictionary should not be reflected in the underlying item.
            </remarks>
            <returns>Dictionary of cloned metadata</returns>
        </member>
        <member name="T:Microsoft.Build.Framework.ITaskItem2">
            <summary>
            This interface adds escaping support to the ITaskItem interface.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ITaskItem2.EvaluatedIncludeEscaped">
            <summary>
            Gets or sets the item include value e.g. for disk-based items this would be the file path.
            </summary>
            <remarks>
            Taking the opportunity to fix the property name, although this doesn't
            make it obvious it's an improvement on ItemSpec.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskItem2.GetMetadataValueEscaped(System.String)">
            <summary>
            Allows the values of metadata on the item to be queried.
            </summary>
            <remarks>
            Taking the opportunity to fix the property name, although this doesn't
            make it obvious it's an improvement on GetMetadata.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskItem2.SetMetadataValueLiteral(System.String,System.String)">
            <summary>
            Allows a piece of custom metadata to be set on the item.  Assumes that the value passed
            in is unescaped, and escapes the value as necessary in order to maintain its value. 
            </summary>
            <remarks>
            Taking the opportunity to fix the property name, although this doesn't
            make it obvious it's an improvement on SetMetadata.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskItem2.CloneCustomMetadataEscaped">
            <summary>
            ITaskItem2 implementation which returns a clone of the metadata on this object.
            Values returned are in their original escaped form. 
            </summary>
            <returns>The cloned metadata, with values' escaping preserved.</returns>
        </member>
        <member name="T:Microsoft.Build.Framework.LazyFormattedBuildEventArgs">
            <summary>
            Stores strings for parts of a message delaying the formatting until it needs to be shown
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.arguments">
            <summary>
            Stores the message arguments.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.originalCultureName">
            <summary>
            Stores the original culture for String.Format.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.originalCultureInfo">
            <summary>
            Non-serializable CultureInfo object
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.locker">
            <summary>
            Lock object.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            This constructor allows all event data to be initialized.
            </summary>
            <param name="message">text message.</param>
            <param name="helpKeyword">help keyword.</param>
            <param name="senderName">name of event sender.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.#ctor(System.String,System.String,System.String,System.DateTime,System.Object[])">
            <summary>
            This constructor that allows message arguments that are lazily formatted.
            </summary>
            <param name="message">text message.</param>
            <param name="helpKeyword">help keyword.</param>
            <param name="senderName">name of event sender.</param>
            <param name="eventTimestamp">Timestamp when event was created.</param>
            <param name="messageArgs">Message arguments.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.Message">
            <summary>
            Gets the formatted message.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Serializes to a stream through a binary writer.
            </summary>
            <param name="writer">Binary writer which is attached to the stream the event will be serialized into.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.CreateFromStream(System.IO.BinaryReader,System.Int32)">
            <summary>
            Deserializes from a stream through a binary reader.
            </summary>
            <param name="reader">Binary reader which is attached to the stream the event will be deserialized from.</param>
            <param name="version">The version of the runtime the message packet was created from</param>
        </member>
        <member name="M:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.FormatString(System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            Formats the given string using the variable arguments passed in.
            
            PERF WARNING: calling a method that takes a variable number of arguments is expensive, because memory is allocated for
            the array of arguments -- do not call this method repeatedly in performance-critical scenarios
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <param name="culture">The culture info for formatting the message.</param>
            <param name="unformatted">The string to format.</param>
            <param name="args">Optional arguments for formatting the given string.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization does not call any constructors, not even
            the parameterless constructor. Therefore since we do not serialize
            this field, we must populate it here.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.LoadInSeparateAppDomainAttribute">
            <summary>
            This attribute is used to mark tasks that need to be run in their own app domains. The build engine will create a new app
            domain each time it needs to run such a task, and immediately unload it when the task is finished.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.LoadInSeparateAppDomainAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.LoggerException">
            <summary>
            Exception that should be thrown by a logger when it cannot continue.
            Allows a logger to force the build to stop in an explicit way, when, for example, it 
            receives invalid parameters, or cannot write to disk.
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.LoggerException.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This constructor only exists to satisfy .NET coding guidelines. Use the rich constructor instead.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.LoggerException.#ctor(System.String)">
            <summary>
            Creates an instance of this exception using the specified error message.
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="M:Microsoft.Build.Framework.LoggerException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of this exception using the specified error message and inner exception.
            </summary>
            <param name="message">Message string</param>
            <param name="innerException">Inner exception. Can be null</param>
        </member>
        <member name="M:Microsoft.Build.Framework.LoggerException.#ctor(System.String,System.Exception,System.String,System.String)">
            <summary>
            Creates an instance of this exception using rich error information.
            </summary>
            <param name="message">Message string</param>
            <param name="innerException">Inner exception. Can be null</param>
            <param name="errorCode">Error code</param>
            <param name="helpKeyword">Help keyword for host IDE. Can be null</param>
        </member>
        <member name="M:Microsoft.Build.Framework.LoggerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used for (de)serialization. 
            If we ever add new members to this class, we'll need to update this.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:Microsoft.Build.Framework.LoggerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable method which we must override since Exception implements this interface
            If we ever add new members to this class, we'll need to update this.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="P:Microsoft.Build.Framework.LoggerException.ErrorCode">
            <summary>
            Gets the error code associated with this exception's message (not the inner exception).
            </summary>
            <value>The error code string.</value>
        </member>
        <member name="P:Microsoft.Build.Framework.LoggerException.HelpKeyword">
            <summary>
            Gets the F1-help keyword associated with this error, for the host IDE.
            </summary>
            <value>The keyword string.</value>
        </member>
        <member name="T:Microsoft.Build.Framework.MetaprojectGeneratedEventArgs">
            <summary>
            Arguments for the metaproject generated event.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.MetaprojectGeneratedEventArgs.metaprojectXml">
            <summary>
            Raw xml representing the metaproject.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.MetaprojectGeneratedEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the MetaprojectGeneratedEventArgs class.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.OutputAttribute">
            <summary>
            This attribute is used by task writers to designate certain task parameters as "outputs". The build engine will only allow
            task parameters (i.e. the task class' .NET properties) that are marked with this attribute to output data from a task. Project
            authors can only use parameters marked with this attribute in a task's &lt;Output&gt; tag. All task parameters, including those
            marked with this attribute, may be treated as inputs to a task by the build engine.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.OutputAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.Profiler.EvaluationIdProvider">
            <summary>
            Assigns unique evaluation ids. Thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.EvaluationIdProvider.GetNextId">
            <summary>
            Returns a unique evaluation id
            </summary>
            <remarks>
            The id is guaranteed to be unique across all running processes.
            Additionally, it is monotonically increasing for callers on the same process id
            </remarks>
        </member>
        <member name="T:Microsoft.Build.Framework.Profiler.EvaluationPass">
            <summary>
            Evaluation main phases used by the profiler
            </summary>
            <remarks>
            Order matters since the profiler pretty printer orders profiled items from top to bottom using 
            the pass they belong to
            </remarks>
        </member>
        <member name="F:Microsoft.Build.Framework.Profiler.EvaluationPass.TotalEvaluation">
            <nodoc/>
        </member>
        <member name="F:Microsoft.Build.Framework.Profiler.EvaluationPass.TotalGlobbing">
            <nodoc/>
        </member>
        <member name="F:Microsoft.Build.Framework.Profiler.EvaluationPass.InitialProperties">
            <nodoc/>
        </member>
        <member name="F:Microsoft.Build.Framework.Profiler.EvaluationPass.Properties">
            <nodoc/>
        </member>
        <member name="F:Microsoft.Build.Framework.Profiler.EvaluationPass.ItemDefinitionGroups">
            <nodoc/>
        </member>
        <member name="F:Microsoft.Build.Framework.Profiler.EvaluationPass.Items">
            <nodoc/>
        </member>
        <member name="F:Microsoft.Build.Framework.Profiler.EvaluationPass.LazyItems">
            <nodoc/>
        </member>
        <member name="F:Microsoft.Build.Framework.Profiler.EvaluationPass.UsingTasks">
            <nodoc/>
        </member>
        <member name="F:Microsoft.Build.Framework.Profiler.EvaluationPass.Targets">
            <nodoc/>
        </member>
        <member name="T:Microsoft.Build.Framework.Profiler.EvaluationLocationKind">
            <summary>
            The kind of the evaluated location being tracked
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.Profiler.EvaluationLocationKind.Element">
            <nodoc/>
        </member>
        <member name="F:Microsoft.Build.Framework.Profiler.EvaluationLocationKind.Condition">
            <nodoc/>
        </member>
        <member name="F:Microsoft.Build.Framework.Profiler.EvaluationLocationKind.Glob">
            <nodoc/>
        </member>
        <member name="T:Microsoft.Build.Framework.Profiler.EvaluationLocation">
            <summary>
            Represents a location for different evaluation elements tracked by the EvaluationProfiler.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.Profiler.EvaluationLocation.PassDefaultDescription">
            <summary>
            Default descriptions for locations that are used in case a description is not provided
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.Profiler.EvaluationLocation.Id">
            <nodoc/>
        </member>
        <member name="P:Microsoft.Build.Framework.Profiler.EvaluationLocation.ParentId">
            <nodoc/>
        </member>
        <member name="P:Microsoft.Build.Framework.Profiler.EvaluationLocation.EvaluationPass">
            <nodoc/>
        </member>
        <member name="P:Microsoft.Build.Framework.Profiler.EvaluationLocation.EvaluationPassDescription">
            <nodoc/>
        </member>
        <member name="P:Microsoft.Build.Framework.Profiler.EvaluationLocation.File">
            <nodoc/>
        </member>
        <member name="P:Microsoft.Build.Framework.Profiler.EvaluationLocation.Line">
            <nodoc/>
        </member>
        <member name="P:Microsoft.Build.Framework.Profiler.EvaluationLocation.ElementName">
            <nodoc/>
        </member>
        <member name="P:Microsoft.Build.Framework.Profiler.EvaluationLocation.ElementDescription">
            <nodoc/>
        </member>
        <member name="P:Microsoft.Build.Framework.Profiler.EvaluationLocation.Kind">
            <nodoc/>
        </member>
        <member name="P:Microsoft.Build.Framework.Profiler.EvaluationLocation.IsEvaluationPass">
            <nodoc/>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.EvaluationLocation.CreateLocationForCondition(System.Nullable{System.Int64},Microsoft.Build.Framework.Profiler.EvaluationPass,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <nodoc/>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.EvaluationLocation.CreateLocationForProject(System.Nullable{System.Int64},Microsoft.Build.Framework.Profiler.EvaluationPass,System.String,System.String,System.Nullable{System.Int32},Microsoft.Build.Framework.IProjectElement)">
            <nodoc/>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.EvaluationLocation.CreateLocationForGlob(System.Nullable{System.Int64},Microsoft.Build.Framework.Profiler.EvaluationPass,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <nodoc/>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.EvaluationLocation.CreateLocationForAggregatedGlob">
            <nodoc/>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.EvaluationLocation.#ctor(System.Int64,System.Nullable{System.Int64},Microsoft.Build.Framework.Profiler.EvaluationPass,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,Microsoft.Build.Framework.Profiler.EvaluationLocationKind)">
            <summary>
            Constructs a generic evaluation location
            </summary>
            <remarks>
            Used by serialization/deserialization purposes
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.EvaluationLocation.#ctor(System.Nullable{System.Int64},Microsoft.Build.Framework.Profiler.EvaluationPass,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,Microsoft.Build.Framework.Profiler.EvaluationLocationKind)">
            <summary>
            Constructs a generic evaluation location based on a (possibly null) parent Id.
            </summary>
            <remarks>
            A unique Id gets assigned automatically
            Used by serialization/deserialization purposes
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.EvaluationLocation.#ctor(Microsoft.Build.Framework.Profiler.EvaluationPass,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,Microsoft.Build.Framework.Profiler.EvaluationLocationKind)">
            <summary>
            Constructs a generic evaluation location with no parent.
            </summary>
            <remarks>
            A unique Id gets assigned automatically
            Used by serialization/deserialization purposes
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.Profiler.EvaluationLocation.EmptyLocation">
            <summary>
            An empty location, used as the starting instance.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.EvaluationLocation.WithEvaluationPass(Microsoft.Build.Framework.Profiler.EvaluationPass,System.String)">
            <nodoc/>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.EvaluationLocation.WithParentId(System.Nullable{System.Int64})">
            <nodoc/>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.EvaluationLocation.WithFile(System.String)">
            <nodoc/>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.EvaluationLocation.WithFileLineAndElement(System.String,System.Nullable{System.Int32},Microsoft.Build.Framework.IProjectElement)">
            <nodoc/>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.EvaluationLocation.WithFileLineAndCondition(System.String,System.Nullable{System.Int32},System.String)">
            <nodoc/>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.EvaluationLocation.WithGlob(System.String)">
            <nodoc/>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.EvaluationLocation.Equals(System.Object)">
            <nodoc/>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.EvaluationLocation.ToString">
            <nodoc/>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.EvaluationLocation.GetHashCode">
            <nodoc/>
        </member>
        <member name="T:Microsoft.Build.Framework.Profiler.ProfilerResult">
            <summary>
            Result of profiling an evaluation
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.Profiler.ProfilerResult.ProfiledLocations">
            <nodoc/>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.ProfilerResult.#ctor(System.Collections.Generic.IDictionary{Microsoft.Build.Framework.Profiler.EvaluationLocation,Microsoft.Build.Framework.Profiler.ProfiledLocation})">
            <nodoc/>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.ProfilerResult.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.ProfilerResult.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Build.Framework.Profiler.ProfiledLocation">
            <summary>
            Result of timing the evaluation of a given element at a given location
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.Profiler.ProfiledLocation.InclusiveTime">
            <nodoc/>
        </member>
        <member name="P:Microsoft.Build.Framework.Profiler.ProfiledLocation.ExclusiveTime">
            <nodoc/>
        </member>
        <member name="P:Microsoft.Build.Framework.Profiler.ProfiledLocation.NumberOfHits">
            <nodoc/>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.ProfiledLocation.#ctor(System.TimeSpan,System.TimeSpan,System.Int32)">
            <nodoc/>
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.ProfiledLocation.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.ProfiledLocation.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Build.Framework.Profiler.ProfiledLocation.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Build.Framework.ProjectEvaluationFinishedEventArgs">
            <summary>
            Arguments for the project evaluation finished event.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectEvaluationFinishedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the ProjectEvaluationFinishedEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectEvaluationFinishedEventArgs.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the ProjectEvaluationFinishedEventArgs class.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectEvaluationFinishedEventArgs.ProjectFile">
            <summary>
            Gets or sets the full path of the project that started evaluation.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectEvaluationFinishedEventArgs.ProfilerResult">
            <summary>
            The result of profiling a project.
            </summary>
            <remarks>
            Null if profiling is not turned on
            </remarks>
        </member>
        <member name="T:Microsoft.Build.Framework.ProjectEvaluationStartedEventArgs">
            <summary>
            Arguments for the project evaluation started event.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectEvaluationStartedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the ProjectEvaluationStartedEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectEvaluationStartedEventArgs.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the ProjectEvaluationStartedEventArgs class.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectEvaluationStartedEventArgs.ProjectFile">
            <summary>
            Gets or sets the full path of the project that started evaluation.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.ProjectFinishedEventArgs">
            <summary>
            Arguments for project finished events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectFinishedEventArgs.#ctor">
            <summary>
            Default constructor 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectFinishedEventArgs.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">name of the project</param>
            <param name="succeeded">true indicates project built successfully</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectFinishedEventArgs.#ctor(System.String,System.String,System.String,System.Boolean,System.DateTime)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild". This constructor allows the timestamp to be set as well
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">name of the project</param>
            <param name="succeeded">true indicates project built successfully</param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectFinishedEventArgs.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Serializes to a stream through a binary writer
            </summary>
            <param name="writer">Binary writer which is attached to the stream the event will be serialized into</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectFinishedEventArgs.CreateFromStream(System.IO.BinaryReader,System.Int32)">
            <summary>
            Deserializes from a stream through a binary reader
            </summary>
            <param name="reader">Binary reader which is attached to the stream the event will be deserialized from</param>
            <param name="version">The version of the runtime the message packet was created from</param>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectFinishedEventArgs.ProjectFile">
            <summary>
            Project name
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectFinishedEventArgs.Succeeded">
            <summary>
            True if project built successfully, false otherwise
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.ProjectImportedEventArgs">
            <summary>
            Arguments for the project imported event.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectImportedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the ProjectImportedEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectImportedEventArgs.#ctor(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the ProjectImportedEventArgs class.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectImportedEventArgs.UnexpandedProject">
            <summary>
            Gets or sets the original value of the Project attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectImportedEventArgs.ImportedProjectFile">
            <summary>
            Gets or sets the full path to the project file that was imported. Will be <code>null</code>
            if the import statement was a glob and no files matched, or the condition (if any) evaluated
            to false.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectImportedEventArgs.ImportIgnored">
            <summary>
            Gets or sets if this import was ignored. Ignoring imports is controlled by
            <code>ProjectLoadSettings</code>. This is only set when an import would have been included
            but was ignored to due being invalid. This does not include when a globbed import returned
            no matches, or a conditioned import that evaluated to false.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.ProjectStartedEventArgs">
            <summary>
            Arguments for project started events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="F:Microsoft.Build.Framework.ProjectStartedEventArgs.InvalidProjectId">
            <summary>
            Indicates an invalid project identifier.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectStartedEventArgs.#ctor">
            <summary>
            Default constructor 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectStartedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">project name</param>
            <param name="targetNames">targets we are going to build (empty indicates default targets)</param>
            <param name="properties">list of properties</param>
            <param name="items">list of items</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectStartedEventArgs.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="projectId">project id</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">project name</param>
            <param name="targetNames">targets we are going to build (empty indicates default targets)</param>
            <param name="properties">list of properties</param>
            <param name="items">list of items</param>
            <param name="parentBuildEventContext">event context info for the parent project</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectStartedEventArgs.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,Microsoft.Build.Framework.BuildEventContext,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="projectId">project id</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">project name</param>
            <param name="targetNames">targets we are going to build (empty indicates default targets)</param>
            <param name="properties">list of properties</param>
            <param name="items">list of items</param>
            <param name="parentBuildEventContext">event context info for the parent project</param>
            <param name="globalProperties">An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing global properties.</param>
            <param name="toolsVersion">The tools version.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectStartedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,System.DateTime)">
            <summary>
            This constructor allows event data to be initialized. Also the timestamp can be set
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">project name</param>
            <param name="targetNames">targets we are going to build (empty indicates default targets)</param>
            <param name="properties">list of properties</param>
            <param name="items">list of items</param>
            <param name="eventTimestamp">The <see cref="T:System.DateTime"/> of the event.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectStartedEventArgs.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,Microsoft.Build.Framework.BuildEventContext,System.DateTime)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="projectId">project id</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">project name</param>
            <param name="targetNames">targets we are going to build (empty indicates default targets)</param>
            <param name="properties">list of properties</param>
            <param name="items">list of items</param>
            <param name="parentBuildEventContext">event context info for the parent project</param>
            <param name="eventTimestamp">The <see cref="T:System.DateTime"/> of the event.</param>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectStartedEventArgs.ProjectId">
            <summary>
            Gets the identifier of the project.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectStartedEventArgs.ParentProjectBuildEventContext">
            <summary>
            Event context information, where the event was fired from in terms of the build location
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.ProjectStartedEventArgs.projectFile">
            <summary>
            The name of the project file
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectStartedEventArgs.ProjectFile">
            <summary>
            Project name
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.ProjectStartedEventArgs.targetNames">
            <summary>
            Targets that we will build in the project
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectStartedEventArgs.TargetNames">
            <summary>
            Targets that we will build in the project
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.ProjectStartedEventArgs.globalProperties">
            <summary>
            Gets the set of global properties used to evaluate this project.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectStartedEventArgs.GlobalProperties">
            <summary>
            Gets the set of global properties used to evaluate this project.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectStartedEventArgs.ToolsVersion">
            <summary>
            Gets the tools version used to evaluate this project.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectStartedEventArgs.Properties">
            <summary>
            List of properties in this project. This is a live, read-only list.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectStartedEventArgs.Items">
            <summary>
            List of items in this project. This is a live, read-only list.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectStartedEventArgs.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Serializes to a stream through a binary writer
            </summary>
            <param name="writer">Binary writer which is attached to the stream the event will be serialized into</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectStartedEventArgs.CreateFromStream(System.IO.BinaryReader,System.Int32)">
            <summary>
            Deserializes from a stream through a binary reader
            </summary>
            <param name="reader">Binary reader which is attached to the stream the event will be deserialized from</param>
            <param name="version">The version of the runtime the message packet was created from</param>
        </member>
        <member name="T:Microsoft.Build.Framework.PropertyInitialValueSetEventArgs">
            <summary>
            The argument for a property initial value set event.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.PropertyInitialValueSetEventArgs.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Build.Framework.PropertyInitialValueSetEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.PropertyInitialValueSetEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.Build.Framework.MessageImportance)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Build.Framework.PropertyInitialValueSetEventArgs"/> class.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyValue">The value of the property.</param>
            <param name="propertySource">The source of the property.</param>
        </member>
        <member name="P:Microsoft.Build.Framework.PropertyInitialValueSetEventArgs.PropertyName">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.PropertyInitialValueSetEventArgs.PropertyValue">
            <summary>
            The value of the property.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.PropertyInitialValueSetEventArgs.PropertySource">
            <summary>
            The source of the property.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.PropertyReassignmentEventArgs">
            <summary>
            The argument for a property reassignment event.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.PropertyReassignmentEventArgs.#ctor">
            <summary>
            Creates an instance of the PropertyReassignmentEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.PropertyReassignmentEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.Build.Framework.MessageImportance)">
            <summary>
            Creates an instance of the PropertyReassignmentEventArgs class.
            </summary>
            <param name="propertyName">The name of the property whose value was reassigned.</param>
            <param name="previousValue">The previous value of the reassigned property.</param>
            <param name="newValue">The new value of the reassigned property.</param>
            <param name="location">The location of the reassignment.</param>
        </member>
        <member name="P:Microsoft.Build.Framework.PropertyReassignmentEventArgs.PropertyName">
            <summary>
            The name of the property whose value was reassigned.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.PropertyReassignmentEventArgs.PreviousValue">
            <summary>
            The previous value of the reassigned property.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.PropertyReassignmentEventArgs.NewValue">
            <summary>
            The new value of the reassigned property.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.PropertyReassignmentEventArgs.Location">
            <summary>
            The location of the reassignment.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.RequiredAttribute">
            <summary>
            This class defines the attribute that a task writer can apply to a task's property to declare the property to be a
            required property.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.RequiredAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.RequiredRuntimeAttribute">
            <summary>
            When marked with the RequiredRuntimeAttribute, a task indicates that it has stricter 
            runtime requirements than a regular task - this tells MSBuild that it will need to potentially 
            launch a separate process for that task if the current runtime does not match the version requirement.
            This attribute is currently non-functional since there is only one version of the CLR that is
            capable of running MSBuild v2.0 or v3.5 - the runtime v2.0 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.RequiredRuntimeAttribute.#ctor(System.String)">
            <summary>
            Constructor taking a version, such as "v2.0". 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.RequiredRuntimeAttribute.RuntimeVersion">
            <summary>
            Returns the runtime version the attribute was constructed with,
            e.g., "v2.0"
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.RunInMTAAttribute">
            <summary>
            This attribute is used to mark a task class as explicitly not being required to run in the STA for COM.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.RunInMTAAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.RunInSTAAttribute">
            <summary>
            This attribute is used to mark a task class as being required to run in a Single Threaded Apartment for COM.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.RunInSTAAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.SdkLogger">
            <summary>
                An abstract interface class to providing real-time logging and status while resolving
                an SDK.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.SdkLogger.LogMessage(System.String,Microsoft.Build.Framework.MessageImportance)">
            <summary>
                Log a build message to MSBuild.
            </summary>
            <param name="message">Message string.</param>
            <param name="messageImportance">Optional message importances. Default to low.</param>
        </member>
        <member name="T:Microsoft.Build.Framework.SdkReference">
            <summary>
                Represents a software development kit (SDK) that is referenced in a &lt;Project /&gt; or &lt;Import /&gt; element.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.SdkReference.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the SdkReference class.
            </summary>
            <param name="name">The name of the SDK.</param>
            <param name="version">The version of the SDK.</param>
            <param name="minimumVersion">Minimum SDK version required by the project.</param>
        </member>
        <member name="P:Microsoft.Build.Framework.SdkReference.Name">
            <summary>
                Gets the name of the SDK.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.SdkReference.Version">
            <summary>
                Gets the version of the SDK.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.SdkReference.MinimumVersion">
            <summary>
                Gets the minimum version required. This value is specified by the project to indicate the minimum version of the
                SDK that is required in order to build. This is useful in order to produce an error message if a name match can
                be found but no acceptable version could be resolved.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.SdkReference.Equals(Microsoft.Build.Framework.SdkReference)">
            <summary>
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.Framework.SdkReference.TryParse(System.String,Microsoft.Build.Framework.SdkReference@)">
            <summary>
                Attempts to parse the specified string as a <see cref="T:Microsoft.Build.Framework.SdkReference" />.  The expected format is:
                    SDK, SDK/Version, or SDK/min=MinimumVersion
                Values are not required to specify a version or MinimumVersion.
            </summary>
            <param name="sdk">An SDK name and version to parse in the format "SDK/Version,min=MinimumVersion".</param>
            <param name="sdkReference">A parsed <see cref="T:Microsoft.Build.Framework.SdkReference" /> if the specified value is a valid SDK name.</param>
            <returns><code>true</code> if the SDK name was successfully parsed, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Microsoft.Build.Framework.SdkReference.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Build.Framework.SdkReference.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Build.Framework.SdkReference.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Build.Framework.SdkResolver">
            <summary>
                An abstract interface for classes that can resolve a Software Development Kit (SDK).
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.SdkResolver.Name">
            <summary>
                Name of the SDK resolver to be displayed in build output log.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.SdkResolver.Priority">
            <summary>
                Gets the self-described resolution priority order. MSBuild will sort resolvers
                by this value.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.SdkResolver.Resolve(Microsoft.Build.Framework.SdkReference,Microsoft.Build.Framework.SdkResolverContext,Microsoft.Build.Framework.SdkResultFactory)">
            <summary>
                Resolves the specified SDK reference.
            </summary>
            <param name="sdkReference">A <see cref="T:Microsoft.Build.Framework.SdkReference" /> containing the referenced SDKs be resolved.</param>
            <param name="resolverContext">Context for resolving the SDK.</param>
            <param name="factory">Factory class to create an <see cref="T:Microsoft.Build.Framework.SdkResult" /></param>
            <returns>
                An <see cref="T:Microsoft.Build.Framework.SdkResult" /> containing the resolved SDKs or associated error / reason
                the SDK could not be resolved.  Return <code>null</code> if the resolver is not
                applicable for a particular <see cref="T:Microsoft.Build.Framework.SdkReference"/>.
                <remarks>
                    Note: You must use the <see cref="T:Microsoft.Build.Framework.SdkResultFactory" /> to return a result.
                </remarks>
            </returns>
        </member>
        <member name="T:Microsoft.Build.Framework.SdkResolverContext">
            <summary>
                Context used by an <see cref="T:Microsoft.Build.Framework.SdkResolver" /> to resolve an SDK.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.SdkResolverContext.Interactive">
            <summary>
            Gets a value indicating if the resolver is allowed to be interactive.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.SdkResolverContext.Logger">
            <summary>
                Logger to log real-time messages back to MSBuild.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.SdkResolverContext.ProjectFilePath">
            <summary>
                Path to the project file being built.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.SdkResolverContext.SolutionFilePath">
            <summary>
                Path to the solution file being built, if known. May be null.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.SdkResolverContext.MSBuildVersion">
            <summary>
                Version of MSBuild currently running.
            <remarks>
                File version based on commit height from our public git repository. This is informational
                and not equal to the assembly version.
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.SdkResolverContext.State">
            <summary>
                Gets or sets any custom state for current build.  This allows resolvers to maintain state between resolutions.
                This property is not thread-safe.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.SdkResult">
            <summary>
                An abstract interface class to indicate SDK resolver success or failure.
                <remarks>
                    Note: Use <see cref="T:Microsoft.Build.Framework.SdkResultFactory" /> to create instances of this class. Do not
                    inherit from this class.
                </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.SdkResult.Success">
            <summary>
                Indicates the resolution was successful.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.SdkResult.Path">
            <summary>
                Resolved path to the SDK.
            
                Null if <see cref="P:Microsoft.Build.Framework.SdkResult.Success"/> == false
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.SdkResult.Version">
            <summary>
                Resolved version of the SDK.
                Can be null or empty if the resolver did not provide a version (e.g. a path based resolver)
            
                Null if <see cref="P:Microsoft.Build.Framework.SdkResult.Success"/> == false
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.SdkResult.SdkReference">
            <summary>
                The Sdk reference
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.SdkResultFactory">
            <summary>
                An abstract interface class provided to <see cref="T:Microsoft.Build.Framework.SdkResolver" /> to create an
                <see cref="T:Microsoft.Build.Framework.SdkResult" /> object indicating success / failure.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.SdkResultFactory.IndicateSuccess(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Create an <see cref="T:Microsoft.Build.Framework.SdkResolver" /> object indicating success resolving the SDK.
            </summary>
            <param name="path">Path to the SDK.</param>
            <param name="version">Version of the SDK that was resolved.</param>
            <param name="warnings">Optional warnings to display during resolution.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.Framework.SdkResultFactory.IndicateFailure(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Create an <see cref="T:Microsoft.Build.Framework.SdkResolver" /> object indicating failure resolving the SDK.
            </summary>
            <param name="errors">
                Errors / reasons the SDK could not be resolved. Will be logged as a
                build error if no other SdkResolvers were able to indicate success.
            </param>
            <param name="warnings"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.Framework.TargetBuiltReason">
            <summary>
            The reason that a target was built by its parent target.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.TargetBuiltReason.None">
            <summary>
            This wasn't built on because of a parent.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.TargetBuiltReason.BeforeTargets">
            <summary>
            The target was part of the parent's BeforeTargets list.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.TargetBuiltReason.DependsOn">
            <summary>
            The target was part of the parent's DependsOn list.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.TargetBuiltReason.AfterTargets">
            <summary>
            The target was part of the parent's AfterTargets list.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TargetFinishedEventArgs">
            <summary>
            Arguments for target finished events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetFinishedEventArgs.#ctor">
            <summary>
            Default constructor 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetFinishedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="targetName">target name</param>
            <param name="projectFile">project file</param>
            <param name="targetFile">file in which the target is defined</param>
            <param name="succeeded">true if target built successfully</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetFinishedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Collections.IEnumerable)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="targetName">target name</param>
            <param name="projectFile">project file</param>
            <param name="targetFile">file in which the target is defined</param>
            <param name="succeeded">true if target built successfully</param>
            <param name="targetOutputs">Target output items for the target. If batching will be null for everything except for the last target in the batch</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetFinishedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.DateTime,System.Collections.IEnumerable)">
            <summary>
            This constructor allows event data to be initialized including the timestamp when the event was created.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="targetName">target name</param>
            <param name="projectFile">project file</param>
            <param name="targetFile">file in which the target is defined</param>
            <param name="succeeded">true if target built successfully</param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
            <param name="targetOutputs">An <see cref="T:System.Collections.IEnumerable"/> containing the outputs of the target.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetFinishedEventArgs.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Serializes to a stream through a binary writer
            </summary>
            <param name="writer">Binary writer which is attached to the stream the event will be serialized into</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetFinishedEventArgs.CreateFromStream(System.IO.BinaryReader,System.Int32)">
            <summary>
            Deserializes from a stream through a binary reader
            </summary>
            <param name="reader">Binary reader which is attached to the stream the event will be deserialized from</param>
            <param name="version">The version of the runtime the message packet was created from</param>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetFinishedEventArgs.TargetName">
            <summary>
            Target name
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetFinishedEventArgs.Succeeded">
            <summary>
            True if target built successfully, false otherwise
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetFinishedEventArgs.ProjectFile">
            <summary>
            Project file associated with event.   
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetFinishedEventArgs.TargetFile">
            <summary>
            File where this target was declared.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetFinishedEventArgs.TargetOutputs">
            <summary>
            Target outputs
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TargetSkippedEventArgs">
            <summary>
            Arguments for the target skipped event.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetSkippedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the TargetSkippedEventArgs class.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetSkippedEventArgs.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the TargetSkippedEventArgs class.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetSkippedEventArgs.TargetName">
            <summary>
            Gets or sets the name of the target being skipped.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetSkippedEventArgs.ParentTarget">
            <summary>
            Gets or sets the parent target of the target being skipped.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetSkippedEventArgs.TargetFile">
            <summary>
            File where this target was declared.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetSkippedEventArgs.BuildReason">
            <summary>
            Why the parent target built this target.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TargetStartedEventArgs">
            <summary>
            Arguments for target started events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>    
        </member>
        <member name="M:Microsoft.Build.Framework.TargetStartedEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetStartedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="targetName">target name</param>
            <param name="projectFile">project file</param>
            <param name="targetFile">file in which the target is defined</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetStartedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            This constructor allows event data to be initialized including the timestamp when the event was created.
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="targetName">target name</param>
            <param name="projectFile">project file</param>
            <param name="targetFile">file in which the target is defined</param>
            <param name="parentTarget">The part of the target.</param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetStartedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.Build.Framework.TargetBuiltReason,System.DateTime)">
            <summary>
            This constructor allows event data to be initialized.
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="targetName">target name</param>
            <param name="projectFile">project file</param>
            <param name="targetFile">file in which the target is defined</param>
            <param name="parentTarget">The part of the target.</param>
            <param name="buildReason">The reason the parent built this target.</param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetStartedEventArgs.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Serializes to a stream through a binary writer
            </summary>
            <param name="writer">Binary writer which is attached to the stream the event will be serialized into</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetStartedEventArgs.CreateFromStream(System.IO.BinaryReader,System.Int32)">
            <summary>
            Deserializes from a stream through a binary reader
            </summary>
            <param name="reader">Binary reader which is attached to the stream the event will be deserialized from</param>
            <param name="version">The version of the runtime the message packet was created from</param>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetStartedEventArgs.TargetName">
            <summary>
            target name
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetStartedEventArgs.ParentTarget">
            <summary>
            Target which caused this target to build
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetStartedEventArgs.ProjectFile">
            <summary>
            Project file associated with event.   
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetStartedEventArgs.TargetFile">
            <summary>
            File where this target was declared.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetStartedEventArgs.BuildReason">
            <summary>
            Why this target was built by its parent.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TaskCommandLineEventArgs">
            <summary>
            This class is used by tasks to log their command lines. This class extends
            <see cref="T:Microsoft.Build.Framework.BuildMessageEventArgs"/> so that command lines can be logged as
            messages. Logging a command line is only relevant for tasks that wrap an
            underlying executable/tool, or emulate a shell command. Tasks that have
            no command line equivalent should not raise this extended message event.
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing ISerializable
            imposes a serialization contract -- it is a promise to never change the
            type's fields i.e. the type is immutable; adding new fields in the next
            version of the type without following certain special FX guidelines, can
            break both forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskCommandLineEventArgs.#ctor">
            <summary>
            Default (family) constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskCommandLineEventArgs.#ctor(System.String,System.String,Microsoft.Build.Framework.MessageImportance)">
            <summary>
            Creates an instance of this class for the given task command line.
            </summary>
            <param name="commandLine">The command line used by a task to launch
            its underlying tool/executable.</param>
            <param name="taskName">The name of the task raising this event.</param>
            <param name="importance">Importance of command line -- controls whether
            the command line will be displayed by less verbose loggers.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskCommandLineEventArgs.#ctor(System.String,System.String,Microsoft.Build.Framework.MessageImportance,System.DateTime)">
            <summary>
            Creates an instance of this class for the given task command line. This constructor allows the timestamp to be set
            </summary>
            <param name="commandLine">The command line used by a task to launch
            its underlying tool/executable.</param>
            <param name="taskName">The name of the task raising this event.</param>
            <param name="importance">Importance of command line -- controls whether
            the command line will be displayed by less verbose loggers.</param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskCommandLineEventArgs.CommandLine">
            <summary>
            Gets the task command line associated with this event.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskCommandLineEventArgs.TaskName">
            <summary>
            Gets the name of the task that raised this event.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TaskFinishedEventArgs">
            <summary>
            Arguments for task finished events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskFinishedEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskFinishedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">project file</param>
            <param name="taskFile">file in which the task is defined</param>
            <param name="taskName">task name</param> 
            <param name="succeeded">true indicates task succeed</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskFinishedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.DateTime)">
            <summary>
            This constructor allows event data to be initialized and the timestamp to be set
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">project file</param>
            <param name="taskFile">file in which the task is defined</param>
            <param name="taskName">task name</param> 
            <param name="succeeded">true indicates task succeed</param>
            <param name="eventTimestamp">Timestamp when event was created</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskFinishedEventArgs.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Serializes to a stream through a binary writer
            </summary>
            <param name="writer">Binary writer which is attached to the stream the event will be serialized into</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskFinishedEventArgs.CreateFromStream(System.IO.BinaryReader,System.Int32)">
            <summary>
            Deserializes the Errorevent from a stream through a binary reader
            </summary>
            <param name="reader">Binary reader which is attached to the stream the event will be deserialized from</param>
            <param name="version">The version of the runtime the message packet was created from</param>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskFinishedEventArgs.TaskName">
            <summary>
            Task Name
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskFinishedEventArgs.Succeeded">
            <summary>
            True if target built successfully, false otherwise
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskFinishedEventArgs.ProjectFile">
            <summary>
            Project file associated with event.   
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskFinishedEventArgs.TaskFile">
            <summary>
            MSBuild file where this task was defined.   
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TaskPropertyInfo">
            <summary>
            Class which represents the parameter information from the using task as a strongly typed class.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskPropertyInfo.#ctor(System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Encapsulates a list of parameters declared in the UsingTask
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="typeOfParameter">The actual type of the parameter</param>
            <param name="output">True if the parameter is both an output and and input parameter. False if the parameter is only an input parameter</param>
            <param name="required">True if the parameter must be supplied to each invocation of the task.</param>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskPropertyInfo.PropertyType">
            <summary>
            The type of the property
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskPropertyInfo.Name">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskPropertyInfo.Output">
            <summary>
            This task parameter is an output parameter (analogous to [Output] attribute)
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskPropertyInfo.Required">
            <summary>
            This task parameter is required (analogous to the [Required] attribute)
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TaskStartedEventArgs">
            <summary>
            Arguments for task started events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskStartedEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskStartedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">project file</param>
            <param name="taskFile">file in which the task is defined</param>
            <param name="taskName">task name</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskStartedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">project file</param>
            <param name="taskFile">file in which the task is defined</param>
            <param name="taskName">task name</param>
            <param name="eventTimestamp">Timestamp when event was created</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskStartedEventArgs.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Serializes to a stream through a binary writer
            </summary>
            <param name="writer">Binary writer which is attached to the stream the event will be serialized into</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskStartedEventArgs.CreateFromStream(System.IO.BinaryReader,System.Int32)">
            <summary>
            Deserializes the Errorevent from a stream through a binary reader
            </summary>
            <param name="reader">Binary reader which is attached to the stream the event will be deserialized from</param>
            <param name="version">The version of the runtime the message packet was created from</param>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskStartedEventArgs.TaskName">
            <summary>
            Task name.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskStartedEventArgs.ProjectFile">
            <summary>
            Project file associated with event.   
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskStartedEventArgs.TaskFile">
            <summary>
            MSBuild file where this task was defined.   
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TelemetryEventArgs">
            <summary>
            Arguments for telemetry events.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TelemetryEventArgs.EventName">
            <summary>
            Gets or sets the name of the event.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TelemetryEventArgs.Properties">
            <summary>
            Gets or sets a list of properties associated with the event.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.UninitializedPropertyReadEventArgs">
            <summary>
            The arguments for an uninitialized property read event.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.UninitializedPropertyReadEventArgs.#ctor">
            <summary>
            UninitializedPropertyReadEventArgs
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.UninitializedPropertyReadEventArgs.#ctor(System.String,System.String,System.String,System.String,Microsoft.Build.Framework.MessageImportance)">
            <summary>
            Creates an instance of the UninitializedPropertyReadEventArgs class
            </summary>
            <param name="propertyName">The name of the uninitialized property that was read.</param>
        </member>
        <member name="P:Microsoft.Build.Framework.UninitializedPropertyReadEventArgs.PropertyName">
            <summary>
            The name of the uninitialized property that was read.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.Argument">
            <summary>
            Represents an argument to a <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/>. 
            </summary>
            <remarks> 
            Functionally, it is simply a reference to another <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/>. Those who manually 
            instantiate this class should remember to call <see cref="M:Microsoft.Build.Framework.XamlTypes.Argument.BeginInit"/> before setting the first
            property and <see cref="M:Microsoft.Build.Framework.XamlTypes.Argument.EndInit"/> after setting the last property of the object.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.Argument.#ctor">
            <summary>
            Default constructor needed for XAML deserialization.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Argument.Property">
            <summary>
            Name of the <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/> this argument refers to. 
            </summary>
            <remarks>
            Its value must point to a valid <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/>. This field is mandatory and culture invariant.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Argument.IsRequired">
            <summary>
            Tells if the <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/> pointed to by <see cref="P:Microsoft.Build.Framework.XamlTypes.Argument.Property"/> must be defined for the definition
            of the <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/> owning this argument to make sense.
            </summary>
            <remarks> 
            This field is optional and is set to <c>false</c> by default.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Argument.Separator">
            <summary>
            The string used to separate this argument value from the parent <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/> switch in the command line.
            </summary>
            <remarks>
            This field is optional and culture invariant.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.Argument.BeginInit">
            <summary>
            See ISupportInitialize.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.Argument.EndInit">
            <summary>
            See ISupportInitialize.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.BaseProperty">
            <summary>
            Represents a <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> property. 
            </summary>
            <remarks> 
            <para>This represents schema information (name, allowed values, etc) of a <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> property.
            Since this is just schema information, there is no field like "Value" used to get/set the value of this
            property.</para>
            <para> Those who manually instantiate this class should remember to call <see cref="M:Microsoft.Build.Framework.XamlTypes.BaseProperty.BeginInit"/> before
            setting the first property and <see cref="M:Microsoft.Build.Framework.XamlTypes.BaseProperty.EndInit"/> after setting the last property of the object.</para>
            </remarks>
            <comment>
            This partial class contains all properties which are public and hence settable in XAML. Those properties that
            are internal are defined in another partial class below.
            </comment>
            <summary>
            Represents a <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> property. 
            </summary>
            <remarks> 
            <para>This represents schema information (name, allowed values, etc) of a <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> property.
            Since this is just schema information, there is no field like "Value" used to get/set the value of this
            property.</para>
            <para> Those who manually instantiate this class should remember to call <see cref="M:Microsoft.Build.Framework.XamlTypes.BaseProperty.BeginInit"/> before
            setting the first property and <see cref="M:Microsoft.Build.Framework.XamlTypes.BaseProperty.EndInit"/> after setting the last property of the object.</para>
            </remarks>
            <comment>
            This partial class contains members that are auto-generated, internal, etc. Whereas the
            other partial class contains public properties that can be set in XAML.
            </comment>
        </member>
        <member name="F:Microsoft.Build.Framework.XamlTypes.BaseProperty._displayName">
            <summary>
            See DisplayName property.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.BaseProperty.#ctor">
            <summary>
            Default constructor. Needed for deserializtion from a persisted format.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.Name">
            <summary>
            The name of this <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/>. 
            </summary>
            <remarks>
            This field is mandatory and culture invariant. The value of this field cannot be set to the empty string. 
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.DisplayName">
            <summary>
            The name that could be used by a prospective UI client to display this <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/>. 
            </summary>
            <remarks>
            This field is optional and is culture sensitive. When this property is not set, it is assigned the same 
            value as the <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.Name"/> property (and hence, would not be localized).
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.Description">
            <summary>
            Description of this <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/> for use by a prospective UI client. 
            </summary>
            <remarks> 
            This field is optional and is culture sensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.F1Keyword">
            <summary>
            The keyword that is used to open the help page for this property.
            </summary>
            <remarks>
            This form of specifying help takes precedence over <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.HelpUrl"/>
            and <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.HelpFile"/> + <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.HelpContext"/>.
            This field is optional and is culture insensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.HelpUrl">
            <summary>
            The URL of the help page for this property that will be opened when the user hits F1.
            </summary>
            <remarks>
            This property is higher in priority that <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.HelpContext"/> + <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.HelpFile"/> 
            (i.e., these two properties are ignored if <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.HelpUrl"/>
            is specified), but lower in priority than <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.F1Keyword"/>.
            This field is optional and is culture insensitive.
            </remarks>
            <example> <c>ms-help://MS.VSCC.v80/MS.MSDN.v80/MS.VisualStudio.v80.en/dv_vstoc/html/06ddebea-2c83-4a45-bb48-6264c797ed93.htm</c> </example>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.HelpFile">
            <summary>
            The help file to use when the user hits F1. Must specify <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.HelpContext"/> along with this.
            </summary>
            <remarks> 
            This property goes along with <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.HelpContext"/>. <seealso cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.HelpContext"/>. This
            form of specifying the help page for a property takes lower precedence than both <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.F1Keyword"/>
            and <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.HelpUrl"/>.
            This field is optional and is culture insensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.HelpContext">
            <summary>
            The help context to use when the user hits F1. Must specify <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.HelpFile"/> along with this.
            </summary>
            <remarks>
            This property uses the <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.HelpFile"/> property to display the help context of the specified 
            help file. This field is optional. This
            form of specifying the help page for a property takes lower precedence than both <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.F1Keyword"/>
            and <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.HelpUrl"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.Category">
            <summary>
            The name of the category to which this property belongs to. 
            </summary>
            <remarks>
            <para>
            If the value of this field  does not correspond to the <c>Name</c> 
            property of a <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.Category"/> element defined in
            the containing <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>, a default <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.Category"/> with this name
            is auto-generated and added to the containing <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> class. 
            </para>
            <para>
            This field is optional and is culture invariant. 
            </para>
            <para>
            When this field is not specified, this property is added to a
            auto-generated category called <c>General</c> (localized). This field cannot be set to the
            empty string.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.Subcategory">
            <summary>
            The sub category to which this property belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.ReadOnly">
            <summary>
            Tells if this property is a read-only property. 
            </summary>
            <remarks>
            This field is optional and its default value is "false".
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.MultipleValuesAllowed">
            <summary>
            A value indicating whether this property allows multiple values to be supplied/selected simultaneously.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.Switch">
            <summary>
            The switch representation of this property for the case when this property represents a tool parameter.
            </summary>
            <remarks>
            This field is optional and culture invariant.
            </remarks>
            <example>
            For the VC++ CL task, <c>WholeProgramOptimization</c> is a boolean parameter. It's switch is <c>GL</c>.
            </example>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.SwitchPrefix">
            <summary>
            The prefix for the switch representation of this property for the case when this property represents a tool parameter.
            </summary>
            <remarks>
            The value specified here overrides the value specified for the parent <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>'s <see cref="P:Microsoft.Build.Framework.XamlTypes.Rule.SwitchPrefix"/>.
            This field is optional and culture invariant.
            </remarks>
            <example>
            For the VC++ CL task, <c>WholeProgramOptimization</c> is a boolean parameter. It's switch is <c>GL</c> and its
            switch prefix (inherited from the parent <see cref="P:Microsoft.Build.Framework.XamlTypes.Rule.SwitchPrefix"/> since it is not overridden by <c>WholeProgramOptimization</c>)
            is <c>/</c>. Thus the complete switch in the command line for this property would be <c>/GL</c>
            </example>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.Separator">
            <summary>
            The token used to separate a switch from its value.
            </summary>
            <remarks>
            The value specified here overrides the value specified for the parent <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>'s <see cref="P:Microsoft.Build.Framework.XamlTypes.Rule.Separator"/>.
            This field is optional and culture invariant.
            </remarks>
            <example>
            Example: Consider <c>/D:WIN32</c>. In this switch and value representation, ":" is the separator since its separates the switch <c>D</c> 
            from its value <c>WIN32</c>.
            </example>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.Visible">
            <summary>
            A hint to the UI client telling it whether to display this property or not.
            </summary>
            <remarks>
            This field is optional and has the default value of "true".
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.IncludeInCommandLine">
            <summary>
            A hint to the command line constructor whether to include this property in the command line or not.
            </summary>
            <remarks>
            Some properties are used only by the targets and don't want to be included in the command line.
            Others (like task parameters) are included in the command line in the form of the switch/value they emit.
            This field is optional and has the default value of <c>true</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.IsRequired">
            <summary>
            Indicates whether this property is required to have a value set.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.Default">
            <summary>
            Specifies the default value for this property. 
            </summary>
            <remarks>
            This field is optional and whether, for a <see cref="T:Microsoft.Build.Framework.XamlTypes.StringProperty"/>,
            it is culture sensitive or not depends on the semantics of it.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.DataSource">
            <summary>
            The data source where the current value of this property is stored. 
            </summary>
            <remarks>
            If defined, it overrides the 
            <see cref="P:Microsoft.Build.Framework.XamlTypes.Rule.DataSource"/> property on the containing <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>. This field is mandatory only if the parent
            <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> does not have the data source initialized. The getter for this property returns
            only the <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.DataSource"/> set directly on this <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/> instance.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.Metadata">
            <summary>
            Additional attributes of this <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/>. 
            </summary>
            <remarks>
            This can be used as a grab bag of additional metadata of this property that are not
            captured by the primary fields. You will need a custom UI to interpret the additional
            metadata since the shipped UI formats can't obviously know about it.
            This field is optional.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.Arguments">
            <summary>
            List of arguments for this property.
            </summary>
            <remarks>
             This field is optional.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.ValueEditors">
            <summary>
            List of value editors for this property. 
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.ContainingRule">
            <summary>
            The <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> containing this <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.BaseProperty.BeginInit">
            <summary>
            See ISupportInitialize.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.BaseProperty.EndInit">
            <summary>
            See ISupportInitialize.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.BoolProperty">
            <summary>
            Represents the schame of a boolean property.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.BoolProperty.ReverseSwitch">
            <summary>
            Represents the logical negation of a boolean switch. 
            </summary>
            <example> 
            <para>
            For the VC++ CL task, <c>WholeProgramOptimization</c> is a boolean parameter. It's switch is <c>GL</c>. To
            disable whole program optimization, you need to pass the ReverseSwitch, which is <c>GL-</c>.
            </para>
            <para>
            This field is optional.
            </para>
            </example>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.Category">
            <summary>
            Represents a category to which a <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/> can belong to.
            </summary>
            <remarks> 
            Those who manually 
            instantiate this class should remember to call <see cref="M:Microsoft.Build.Framework.XamlTypes.Category.BeginInit"/> before setting the first
            property and <see cref="M:Microsoft.Build.Framework.XamlTypes.Category.EndInit"/> after setting the last property of the object.
            </remarks>
            <comment>
            This partial class contains all properties which are public and hence settable in XAML. Those properties that
            are internal are defined in another partial class below.
            </comment>
            <summary>
            Represents a category to which a <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/> can belong to.
            </summary>
            <remarks> 
            Those who manually 
            instantiate this class should remember to call <see cref="M:Microsoft.Build.Framework.XamlTypes.Category.BeginInit"/> before setting the first
            property and <see cref="M:Microsoft.Build.Framework.XamlTypes.Category.EndInit"/> after setting the last property of the object.
            </remarks>
            <comment>
            This partial class contains members that are auto-generated, internal, etc. Whereas the
            other partial class contains public properties that can be set in XAML.
            </comment>
        </member>
        <member name="F:Microsoft.Build.Framework.XamlTypes.Category._displayName">
            <summary>
            See DisplayName property.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Category.Name">
            <summary>
            The name of this <see cref="T:Microsoft.Build.Framework.XamlTypes.Category"/>. 
            </summary>
            <remarks>
            This field is mandatory and culture invariant.
            This field cannot be set to the empty string.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Category.DisplayName">
            <summary>
            The name that could be used by a prospective UI client to display this <see cref="T:Microsoft.Build.Framework.XamlTypes.Category"/>. 
            </summary>
            <remarks>
            This field is optional and is culture sensitive. When this property is not set, it is assigned the same 
            value as the <see cref="P:Microsoft.Build.Framework.XamlTypes.Category.Name"/> property (and hence, would not be localized).
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Category.Description">
            <summary>
            Description of this <see cref="T:Microsoft.Build.Framework.XamlTypes.Category"/>. 
            </summary>
            <remarks>
            This field is optional and is culture sensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Category.Subtype">
            <summary>
            Subtype of this <see cref="T:Microsoft.Build.Framework.XamlTypes.Category"/>. Is either <c>Grid</c> (default) or <c>CommandLine</c>.
            </summary>
            <remarks>
            It helps the UI display this category in an appropriate form. E.g. non command line category
            properties are normally displayed in the form of a property grid.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Category.HelpString">
            <summary>
            Help information for this <see cref="T:Microsoft.Build.Framework.XamlTypes.Category"/>. 
            </summary>
            <remarks>
            Maybe used to specify a help URL. This field
            is optional and is culture sensitive.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.Category.#ctor">
            <summary>
            Default constructor. Called during deserialization.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.Category.BeginInit">
            <summary>
            See ISupportInitialize.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.Category.EndInit">
            <summary>
            See ISupportInitialize.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.CategorySchema">
            <summary>
            The CategorySchema provides a strongly typed identity handle to the underlying schema data model.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.ContentType">
            <summary>
            Used to deserialize the content type information 
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.XamlTypes.ContentType._metadata">
            <summary>
            metadata hash
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.ContentType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.ContentType.Name">
            <summary>
            serializes IContentType.Name
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.ContentType.DisplayName">
            <summary>
            serializes IContentType.DisplayName
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.ContentType.ItemType">
            <summary>
            serializes IContentType.ItemType
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.ContentType.DefaultContentTypeForItemType">
            <summary>
            serializes IContentType.DefaultContentTypeForItemType
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.ContentType.ItemGroupName">
            <summary>
            This property was never used for anything.  It should have been removed before we shipped MSBuild 4.0.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.ContentType.Metadata">
            <summary>
            serializes content type's metadata. Accessible via IContentType.GetMetadata()
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.ContentType.GetMetadata(System.String)">
            <summary>
            Access metadata in convenient way
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.ContentType.BeginInit">
            <summary>
            See ISupportInitialize.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.ContentType.EndInit">
            <summary>
            See ISupportInitialize.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.ContentType.GetSchemaObjectTypes">
            <summary>
            see IProjectSchemaNode
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.ContentType.GetSchemaObjects(System.Type)">
            <summary>
            see IProjectSchemaNode
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.ContentType.InitializeMetadata">
            <summary>
            Lazily initializes the metadata dictionary.
            </summary>
            <returns>The new dictionary.</returns>
            <remarks>
            This is a destructive operation.  It clears the NameValuePair list field.
            </remarks>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.DefaultValueSourceLocation">
            <summary>
            Indicates where the default value for some property may be found.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.XamlTypes.DefaultValueSourceLocation.BeforeContext">
            <summary>
            The default value for a property is set at the top of the project file (usually via an import of a .props file).
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.XamlTypes.DefaultValueSourceLocation.AfterContext">
            <summary>
            The default value for a property is set at the bottom of the project file (usually via an import of a .targets file,
            where the property definition is conditional on whether the property has not already been defined.)
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.DataSource">
            <summary>
            Represents the location and grouping for a <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/>.
            </summary>
            <remarks> 
            Those who manually 
            instantiate this class should remember to call <see cref="M:Microsoft.Build.Framework.XamlTypes.DataSource.BeginInit"/> before setting the first
            property and <see cref="M:Microsoft.Build.Framework.XamlTypes.DataSource.EndInit"/> after setting the last property of the object.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.DataSource.#ctor">
            <summary>
            Default constructor. Needed for proper XAML deserialization.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.DataSource.Persistence">
            <summary>
            The storage location for this data source. 
            </summary>
            <remarks>
            This field is mandatory unless <see cref="P:Microsoft.Build.Framework.XamlTypes.DataSource.PersistenceStyle"/> is set. In that case, the parent 
            <see cref="T:Microsoft.Build.Framework.XamlTypes.DataSource"/> will be used with the specified style. Example values are <c>ProjectFile</c> and 
            <c>UserFile</c>. <c>ProjectFile</c> causes the property value to be written to and read from the project 
            manifest file or the property sheet (depending on which node in the solution explorer/property manager window
            is used to spawn the property pages UI). <c>UserFile</c> causes the property value to be written to and read
            from the .user file.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.DataSource.PersistenceStyle">
            <summary>
            The storage style for this data source.
            </summary>
            <remarks>
            For example, with <see cref="P:Microsoft.Build.Framework.XamlTypes.DataSource.Persistence"/> of <c>ProjectFile</c>, this field can be <c>Element</c> (default) to 
            save as a child XML Element, or <c>Attribute</c> to save properties as an XML attribute.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.DataSource.PersistedName">
            <summary>
            Gets or sets the actual MSBuild property name used to read/write the value of this property.
            Applicable only to <see cref="T:Microsoft.Build.Framework.XamlTypes.DataSource"/> objects attached to properties.
            </summary>
            <value>The MSBuild property name to use; or <c>null</c> to use the <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.Name"/> as the MSBuild property name.</value>
            <remarks>
            <para>The persisted name will usually be the same as the property name as it appears in the <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>
            and the value of this property can therefore be left at is default of <c>null</c>.
            Since property names must be unique but need not be unique in the persisted store (due to other differences
            in the data source such as item type) there may be times when Rule property names must be changed to be
            unique in the XAML file, but without changing how the property is persisted in the MSBuild file.
            It is in those cases where this property becomes useful.</para>
            <para>It may also be useful in specialized build environments where property names must differ from the
            normally used name in order to maintain compatibility with the project system.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.DataSource.Label">
            <summary>
            The label of the MSBuild property group/item definition group to which
            a property/item definition metadata belongs to. Default value is the
            empty string.
            </summary>
            <example> A VC++ property that exists in the project manifest
            in the MSBuild property group with label <c>Globals</c> would have this
            same value for this field. </example>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.DataSource.ItemType">
            <summary>
            If a <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/> is an item definition metadata or item metadata, this field
            specified the item type of the item definition or the item, respectively. For common properties
            this field must not be set.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.DataSource.HasConfigurationCondition">
            <summary>
            Indicates if a property is configuration-dependent as indicated by the presence of a configuration
            condition attached to the property definition at its persistence location.
            </summary>
            <remarks>
            This field is optional and has the default value of <c>true</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.DataSource.SourceType">
            <summary>
            The data type of the source.  Generally one of <c>Item</c>, <c>ItemDefinition</c>, <c>Property</c>,
            or <c>TargetResults</c> (when <see cref="P:Microsoft.Build.Framework.XamlTypes.DataSource.MSBuildTarget"/> is non-empty).
            Among other things this governs how the data is treated during build.
            </summary>
            <example>
            A value of <c>Item</c> for this property indicates that this property is actually 
            an item array - the list of all items with the item type specified by <see cref="P:Microsoft.Build.Framework.XamlTypes.DataSource.ItemType"/>.
            </example>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.DataSource.MSBuildTarget">
            <summary>
            Gets or sets the semicolon-delimited list of MSBuild targets that must be executed before reading
            the read-only properties or items described by this <see cref="T:Microsoft.Build.Framework.XamlTypes.DataSource"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.DataSource.SourceOfDefaultValue">
            <summary>
            Gets or sets a value indicating where the default value for this property can be found.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.DataSource.BeginInit">
            <summary>
            See ISupportInitialize.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.DataSource.EndInit">
            <summary>
            See ISupportInitialize.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.DynamicEnumProperty">
            <summary>
            Represents the schema of an enumeration property.
            </summary>
            <remarks> This class inherits the <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.Default"/> property from the <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/> class.
            That property does not make sense for this property. Use the <see cref="P:Microsoft.Build.Framework.XamlTypes.EnumValue.IsDefault"/> property on the
            <see cref="T:Microsoft.Build.Framework.XamlTypes.EnumValue"/> instead to mark the default value for this property. </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.DynamicEnumProperty.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.DynamicEnumProperty.EnumProvider">
            <summary>
            The provider that produces the list of possible values for this property. Must be set.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.DynamicEnumProperty.ProviderSettings">
            <summary>
            A provider-specific set of options to pass to the provider.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.EnumProperty">
            <summary>
            Represents the schema of an enumeration property.
            </summary>
            <remarks> This class inherits the <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.Default"/> property from the <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/> class.
            That property does not make sense for this property. Use the <see cref="P:Microsoft.Build.Framework.XamlTypes.EnumValue.IsDefault"/> property on the
            <see cref="T:Microsoft.Build.Framework.XamlTypes.EnumValue"/> instead to mark the default value for this property. </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.EnumProperty.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.EnumProperty.AdmissibleValues">
            <summary>
            The list of possible values for this property. Must have at least one value.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.EnumProperty.EndInit">
            <summary>
            See ISupportInitialize.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.EnumValue">
            <summary>
            Represents an admissible value of an <see cref="T:Microsoft.Build.Framework.XamlTypes.EnumProperty"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.XamlTypes.EnumValue._displayName">
            <summary>
            See DisplayName property.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.EnumValue.#ctor">
            <summary>
            Default constructor needed for XAML deserialization.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.EnumValue.Name">
            <summary>
            The name of this <see cref="T:Microsoft.Build.Framework.XamlTypes.EnumValue"/>. 
            </summary>
            <remarks>
            This field is mandatory and culture invariant.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.EnumValue.DisplayName">
            <summary>
            The name that could be used by a prospective UI client to display this <see cref="T:Microsoft.Build.Framework.XamlTypes.EnumValue"/>. 
            </summary>
            <remarks>
            This field is optional and is culture sensitive. When this property is not set, it is assigned the same 
            value as the <see cref="P:Microsoft.Build.Framework.XamlTypes.EnumValue.Name"/> property (and hence, would not be localized).
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.EnumValue.Description">
            <summary>
            Description of this <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/> for use by a prospective UI client. 
            </summary>
            <remarks> 
            This field is optional and is culture sensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.EnumValue.HelpString">
            <summary>
            Help information for this <see cref="T:Microsoft.Build.Framework.XamlTypes.EnumValue"/>. 
            </summary>
            <remarks>
            Maybe used to specify a help URL. This field
            is optional and is culture sensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.EnumValue.Switch">
            <summary>
            The switch representation of this property for the case when the parent <see cref="T:Microsoft.Build.Framework.XamlTypes.EnumProperty"/> represents a tool parameter.
            </summary>
            <remarks>
            This field is optional and culture invariant.
            </remarks>
            <example> The VC compiler has an <see cref="T:Microsoft.Build.Framework.XamlTypes.EnumProperty"/> named <c>Optimization</c>used to specify the desired optimization type. All the
            admissible values for this property have switches, e.g. <c>Disabled</c> (switch = <c>Od</c>), "MinimumSize" (switch = <c>O1</c>), 
            etc. </example>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.EnumValue.SwitchPrefix">
            <summary>
            The prefix for the switch representation of this value for the case when the parent <see cref="T:Microsoft.Build.Framework.XamlTypes.EnumProperty"/> represents a tool parameter.
            </summary>
            <remarks>
            This field is optional and culture invariant.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.EnumValue.IsDefault">
            <summary>
            Tells if this <see cref="T:Microsoft.Build.Framework.XamlTypes.EnumValue"/> is the default value for the associated
            <see cref="T:Microsoft.Build.Framework.XamlTypes.EnumProperty"/>. 
            </summary>
            <remarks>
            This field is optional and the default value for this
            field is "false".
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.EnumValue.Metadata">
            <summary>
            Additional attributes of this <see cref="T:Microsoft.Build.Framework.XamlTypes.EnumValue"/>. 
            </summary>
            <remarks>
            This can be used as a grab bag of additional metadata of this value that are not
            captured by the primary fields. You will need a custom UI to interpret the additional
            metadata since the shipped UI formats can't obviously know about it.
            This field is optional.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.EnumValue.Arguments">
            <summary>
            List of arguments for this <see cref="T:Microsoft.Build.Framework.XamlTypes.EnumValue"/>. 
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.FileExtension">
            <summary>
            simple class that deserialize extension to content type data
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.FileExtension.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.FileExtension.Name">
            <summary>
            file extension 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.FileExtension.ContentType">
            <summary>
            corresponding content type
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.FileExtension.GetSchemaObjectTypes">
            <summary>
            see IProjectSchemaNode
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.FileExtension.GetSchemaObjects(System.Type)">
            <summary>
            see IProjectSchemaNode
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.IntProperty">
            <summary>
            Represent the schema of an integer property.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.IntProperty.MinValue">
            <summary>
            Minimum allowed value for this property. 
            </summary>
            <remarks>
            This field is optional. 
            It returns null when this property is not set. The value of this
            property must be less than or equal to the <see cref="P:Microsoft.Build.Framework.XamlTypes.IntProperty.MaxValue"/>
            property (assuming that the latter is defined).
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.IntProperty.MaxValue">
            <summary>
            Maximum allowed value for this property. 
            </summary>
            <remarks>
            This field is optional. 
            It returns null when this property is not set. The value of this
            property must be greater than or equal to the <see cref="P:Microsoft.Build.Framework.XamlTypes.IntProperty.MinValue"/>
            property (assuming that the latter is defined).
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.IntProperty.EndInit">
            <summary>
            See ISupportInitialize.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.IProjectSchemaNode">
            <summary>
            Interface that we expect all root classes from project schema XAML files to implement
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.IProjectSchemaNode.GetSchemaObjectTypes">
            <summary>
            Return all types of static data for data driven features this node contains
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.IProjectSchemaNode.GetSchemaObjects(System.Type)">
            <summary>
            Returns all instances of static data with Type "type".  Null or Empty list if there is no objects from asked type provided by this node
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.ItemType">
            <summary>
            Used to deserialize the item type information 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.ItemType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.ItemType.Name">
            <summary>
            serializes IItemType.Name
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.ItemType.DisplayName">
            <summary>
            serializes IItemType.DisplayName
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.ItemType.DefaultContentType">
            <summary>
            serializes IItemType.ItemType
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.ItemType.UpToDateCheckInput">
            <summary>
            serializes IItemType.UpToDateCheckInput
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.ItemType.BeginInit">
            <summary>
            See ISupportInitialize.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.ItemType.EndInit">
            <summary>
            See ISupportInitialize.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.ItemType.GetSchemaObjectTypes">
            <summary>
            see IProjectSchemaNode
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.ItemType.GetSchemaObjects(System.Type)">
            <summary>
            see IProjectSchemaNode
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.NameValuePair">
            <summary>
            Represents a name-value pair. The name cannot be null or empty.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.NameValuePair.#ctor">
            <summary>
            Default constructor needed for 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.NameValuePair.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.NameValuePair.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.ProjectSchemaDefinitions">
            <summary>
            Serialization class for node for the Data driven project schema XAML
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.ProjectSchemaDefinitions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.ProjectSchemaDefinitions.Nodes">
            <summary>
            Collection of any schema node
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.ProjectSchemaDefinitions.GetSchemaObjectTypes">
            <summary>
            see IProjectSchemaNode
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.ProjectSchemaDefinitions.GetSchemaObjects(System.Type)">
            <summary>
            see IProjectSchemaNode
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.RuleOverrideMode">
            <summary>
            Methods for overriding one rule with another.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.XamlTypes.RuleOverrideMode.Replace">
            <summary>
            A subsequent definition for a rule (with the same name) entirely overrides a previous definition.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.XamlTypes.RuleOverrideMode.Extend">
            <summary>
            A subsequent definition for a rule (with the same name) adds properties to a previous definition.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.Rule">
            <summary>
            Used to represent the schema information for a Tool, a Custom Build Rule, a PropertyPage, etc. 
            </summary> 
            <remarks> 
            <para>
            Normally represented on disk as XAML, only one instance of this class is maintained per XAML
            file per project engine (solution).
            </para>
            <para> Those who manually instantiate this class should remember to call <see cref="M:Microsoft.Build.Framework.XamlTypes.Rule.BeginInit"/> before
            setting the first property and <see cref="M:Microsoft.Build.Framework.XamlTypes.Rule.EndInit"/> after setting the last property of the object.
            </para>
            </remarks>
            <comment>
            This partial class contains all properties which are public and hence settable in XAML. Those properties that
            are internal are defined in another partial class below.
            </comment>
            <summary>
            Used to represent the schema information for a Tool, a Custom Build Rule, a PropertyPage, etc. 
            </summary> 
            <remarks> 
            <para>
            Normally represented on disk as XAML, only one instance of this class is maintained per XAML
            file per project engine (solution).
            </para>
            <para> Those who manually instantiate this class should remember to call <see cref="M:Microsoft.Build.Framework.XamlTypes.Rule.BeginInit"/> before
            setting the first property and <see cref="M:Microsoft.Build.Framework.XamlTypes.Rule.EndInit"/> after setting the last property of the object.
            </para>
            </remarks>
            <comment>
            This partial class contains members that are auto-generated, internal, etc. Whereas the
            other partial class contains public properties that can be set in XAML.
            </comment>
        </member>
        <member name="F:Microsoft.Build.Framework.XamlTypes.Rule._displayName">
            <summary>
            See DisplayName property.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.Rule.#ctor">
            <summary>
            Default constructor. Needed for deserialization from a persisted format.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.Name">
            <summary>
            The name of this <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>. 
            </summary>
            <remarks>
            This field is mandatory and culture invariant. The value of this field cannot be set to the empty string. 
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.DisplayName">
            <summary>
            The name that could be used by a prospective UI client to display this <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/>. 
            </summary>
            <remarks>
            This field is optional and is culture sensitive. When this property is not set, it is assigned the same 
            value as the <see cref="P:Microsoft.Build.Framework.XamlTypes.Rule.Name"/> property (and hence, would not be localized).
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.ToolName">
            <summary>
            The name of the tool executable when this rule represents a tool.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.Description">
            <summary>
            Description of this <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> for use by a prospective UI client. 
            </summary>
            <remarks> 
            This field is optional and is culture sensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.HelpString">
            <summary>
            Help information for this <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>. 
            </summary>
            <remarks>
            Maybe used to specify a help URL. This field
            is optional and is culture sensitive.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.SwitchPrefix">
            <summary>
            The prefix to use for all property switches in this <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> for the case when this property <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> represent a tool.
            </summary>
            <remarks>
            The value specified can be overridden by the value specified by a child <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/>'s <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.SwitchPrefix"/>.
            This field is optional and culture invariant.
            </remarks>
            <example>
            For the VC++ CL task, <c>WholeProgramOptimization</c> is a boolean parameter. It's switch is <c>GL</c> and its
            switch prefix (inherited from the parent <see cref="P:Microsoft.Build.Framework.XamlTypes.Rule.SwitchPrefix"/> since it is not overridden by <c>WholeProgramOptimization</c>)
            is <c>/</c>. Thus the complete switch in the command line for this property would be <c>/GL</c>
            </example>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.Separator">
            <summary>
            The token used to separate a property switch from its value.
            </summary>
            <remarks>
            The value specified here is overridden by the value specified by the child <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/>'s <see cref="P:Microsoft.Build.Framework.XamlTypes.BaseProperty.Separator"/>.
            This field is optional and culture invariant.
            </remarks>
            <example>
            Example: Consider <c>/D:WIN32</c>. In this switch and value representation, ":" is the separator since its separates the switch <c>D</c> 
            from its value <c>WIN32</c>.
            </example>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.PageTemplate">
            <summary>
            The UI renderer template used to display this Rule. 
            </summary>
            <remarks>
            The value used to set
            this field can be anything as long as it is recognized by the intended renderer.
            This field is required only if this Rule is meant to be displayed as a property page.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.DataSource">
            <summary>
            The <see cref="P:Microsoft.Build.Framework.XamlTypes.Rule.DataSource"/> for all the properties in this <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>. This is overriden by any
            data source defined locally for a property. 
            </summary>
            <remarks>
            This field need not be specified only if all individual properties have data source defined locally.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.Order">
            <summary>
            This is a suggestion to a prospective UI client on the relative location of this <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> compared to all other Rules in the system.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.SupportsFileBatching">
            <summary>
            This is used to specify whether multiple files need to be batched on one command line invocation. 
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.ShowOnlyRuleProperties">
            <summary>
            Indicates whether to hide the command line category or not. Default value is true.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.FileExtension">
            <summary>
            When this <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> represents a Build Customization, this field represents the file extension to associate.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.ExecutionDescription">
            <summary>
            When this <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> represents a Build Customization, this field represents the message to be displayed before executing a Build Customization during the build.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.CommandLine">
            <summary>
            When this <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> represents a Build Customization, this field represents the command line template that is going to be used by a Build Customization task to invoke the tool.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.AdditionalInputs">
            <summary>
            When this <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> represents a Build Customization, this field defines the semicolon separated list of additional inputs that are going to be evaluated
            for the Build Customization target.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.Outputs">
            <summary>
            When this <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> represents a Build Customization, this field defines the semicolon separated list of outputs that are going to be evaluated
            for the Build Customization target.
            </summary>
            <remarks>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.OverrideMode">
            <summary>
            Gets or sets the method to use when multiple rules with the same name appear in the project
            to reconcile the rules into one instance.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.Properties">
            <summary>
            This list of properties in this <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>. Atleast one property should be specified.
            </summary>
            <remarks> The list returned by this property should not be modified. </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.Categories">
            <summary>
            The list of <see cref="T:Microsoft.Build.Framework.XamlTypes.Category"/>s that properties in this <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> belong to. 
            </summary>
            <remarks>
            This field is optional. Note that this field returns only the categories that were explicitly defined and do
            not contain any auto-generated categories. When a <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/> contained in this <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>
            declares its category to be something that is not present in this list, then we auto-generate a <see cref="T:Microsoft.Build.Framework.XamlTypes.Category"/>
            with that name and add it to the internal list of categories. That auto-generated category will not be returned
            by this field.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.Metadata">
            <summary>
            Gets or sets arbitrary metadata that may be set on a rule.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.PropertyPagesHidden">
            <summary>
            Gets or sets a value indicating if property pages for this rule should be hidden or not.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.XamlTypes.Rule._syncObject">
            <summary>
            Thread synchronization.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.XamlTypes.Rule._evaluatedCategories">
            <summary>
            See the <see cref="P:Microsoft.Build.Framework.XamlTypes.Rule.EvaluatedCategories"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.XamlTypes.Rule._categoryNamePropertyListMap">
            <summary>
            Ordered dictionary of category names and the properties contained in them.
            The order of the categories is exactly the same as that specified in the XAML file.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.XamlTypes.Rule._propertiesByNameMap">
            <summary>
            A lookup cache of property names to properties.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.Rule.EvaluatedCategories">
            <summary>
            This property returns the union of XAML specified <see cref="T:Microsoft.Build.Framework.XamlTypes.Category"/>s and auto-generated 
            <see cref="T:Microsoft.Build.Framework.XamlTypes.Category"/>s. The latter are created from the missing categories that are being referred to by the 
            properties in this Rule. The auto-generated <see cref="T:Microsoft.Build.Framework.XamlTypes.Category"/>s only have their name set.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.Rule.GetPropertiesByCategory">
            <summary>
            Returns all properties partitioned into categories. The return value is never
            null. 
            The returned list may contain auto-generated categories. Note that if a <see cref="T:Microsoft.Build.Framework.XamlTypes.BaseProperty"/>
            (or its derived classes) refer to a property that is not specified, then an new
            Category is generated for the same. If not category is specified for the property, then
            the property is placed in the "General" category.
            The list of categories is exactly as specified in the Xaml file. The auto-generated
            categories come (in no strict order) after the specified categories.
            </summary>
            <returns> A dictionary whose keys are the <see cref="T:Microsoft.Build.Framework.XamlTypes.Category"/> names and 
            the value is the list of properties in that category. </returns>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.Rule.GetPropertiesInCategory(System.String)">
            <summary>
            Returns the list of properties in a <see cref="T:Microsoft.Build.Framework.XamlTypes.Category"/>. Returns null if this <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>
            doesn't contain this category.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.Rule.GetProperty(System.String)">
            <summary>
            Returns a property with a given name.
            </summary>
            <returns>The property, or <c>null</c> if one with a matching name could not be found.</returns>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.Rule.BeginInit">
            <summary>
            See ISupportInitialize.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.Rule.EndInit">
            <summary>
            See ISupportInitialize.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.Rule.GetSchemaObjectTypes">
            <summary>
            see IProjectSchemaNode
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.Rule.GetSchemaObjects(System.Type)">
            <summary>
            see IProjectSchemaNode
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.Rule.Initialize">
            <summary>
            Initializes this class after Xaml loading is done.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.Rule.CreateCategoryNamePropertyListMap">
            <summary>
            Creates a map containing all the evaluated category names and the list of
            properties belonging to that category.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.RuleBag">
            <summary>
            This is a simple container for <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> instances. 
            </summary>
            <remarks>
            Note that we only deal in terms of <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>s
            as far as property pages are concerned. The <see cref="T:Microsoft.Build.Framework.XamlTypes.RuleBag"/> is only used as a 
            container for more than one <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>. The containing <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>s are 
            immediately stripped off after loading of the xaml file.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.RuleBag.#ctor">
            <summary>
            Default constructor needed for XAML deserialization.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.RuleBag.Rules">
            <summary>
            The collection of <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/> instances this <see cref="T:Microsoft.Build.Framework.XamlTypes.RuleBag"/> instance contains.
            Must have at least one <see cref="T:Microsoft.Build.Framework.XamlTypes.Rule"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.RuleBag.BeginInit">
            <summary>
            See ISupportInitialize Members.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.RuleBag.EndInit">
            <summary>
            See ISupportInitialize Members.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.RuleBag.GetSchemaObjectTypes">
            <summary>
            see IProjectSchemaNode
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.RuleBag.GetSchemaObjects(System.Type)">
            <summary>
            see IProjectSchemaNode
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.RuleSchema">
            <summary>
            The RuleSchema provides a strongly typed identity handle to the underlying schema data model.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.StringListProperty">
            <summary>
            Represents the schema of a list-of-strings property. 
            </summary>
            <remarks>
            Note, this represents
            a list of strings, not a list of <see cref="T:Microsoft.Build.Framework.XamlTypes.StringProperty"/>s.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.StringListProperty.#ctor">
            <summary>
            Default constructor. Needed for property XAML deserialization.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.StringListProperty.CommandLineValueSeparator">
            <summary>
            The separator to use in delineating individual values of this string list property
            </summary>
            <remarks>
            For <c>Val1;Val2;Val3</c>, if <c>CommandLineValueSeparator</c> is specified as, say <c>,</c>,
            the command line looks like this: <c>/p:val1,val2,val3</c>
            If not specified, the command line looks like this: <c>/p:val1 /p:val2 /p:val3</c>
            This field is optional.
            </remarks>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.StringListProperty.RendererValueSeparator">
            <summary>
            Please don't use. This is planned to be deprecated.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.StringListProperty.Subtype">
            <summary>
            Qualifies this string property to give it a more specific classification.
            </summary>
            <remarks>
            Similar to the <see cref="P:Microsoft.Build.Framework.XamlTypes.StringProperty.Subtype"/> property. 
            </remarks>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.StringProperty">
            <summary>
            Represents the schema of a string property.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.StringProperty.Subtype">
            <summary>
            Qualifies this string property to give it a more specific classification.
            </summary>
            <remarks>
            The value this field is set to, must be understood by the consumer of this field
            (normally a UI renderer).
            </remarks>
            <example> The value of this property can be set to, say, "File", "Folder", "CarModel" etc. to specify
            if this is a file path, folder path, car model name etc. </example>
        </member>
        <member name="T:Microsoft.Build.Framework.XamlTypes.ValueEditor">
            <summary>
            Represents a value editor 
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.XamlTypes.ValueEditor._displayName">
            <summary>
            See DisplayName property.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.ValueEditor.#ctor">
            <summary>
            Default constructor needed for XAML deserialization.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.ValueEditor.EditorType">
            <summary>
            The name of this <see cref="T:Microsoft.Build.Framework.XamlTypes.ValueEditor"/>. This field is mandatory and culture invariant.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.ValueEditor.DisplayName">
            <summary>
            The UI display name for the editor
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.XamlTypes.ValueEditor.Metadata">
            <summary>
            Additional attributes of the editor that are not generic enough to be made
            properties on this class. This field is optional.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.ValueEditor.BeginInit">
            <summary>
            See ISupportInitialize.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.XamlTypes.ValueEditor.EndInit">
            <summary>
            See ISupportInitialize.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Shared.MSBuildConstants">
            <summary>
            Constants that we want to be shareable across all our assemblies.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.ToolsPath">
            <summary>
            The name of the property that indicates the tools path
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.ToolsPath64">
            <summary>
            Name of the property that indicates the X64 tools path
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.SdksPath">
            <summary>
            Name of the property that indicates the root of the SDKs folder
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.TreatWarningsAsErrors">
            <summary>
            Name of the property that indicates that all warnings should be treated as errors.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.WarningsAsErrors">
            <summary>
            Name of the property that indicates a list of warnings to treat as errors.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.WarningsAsMessages">
            <summary>
            Name of the property that indicates the list of warnings to treat as messages.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.NuGetAssemblyPathEnvironmentVariableName">
            <summary>
            The name of the environment variable that users can specify to override where NuGet assemblies are loaded from in the NuGetSdkResolver.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.RestoreTargetName">
            <summary>
            The name of the target to run when a user specifies the /restore command-line argument.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.CurrentVisualStudioVersion">
            <summary>
            The most current Visual Studio Version known to this version of MSBuild.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.CurrentToolsVersion">
            <summary>
            The most current ToolsVersion known to this version of MSBuild.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.CurrentAssemblyVersion">
            <summary>
            The most current VSGeneralAssemblyVersion known to this version of MSBuild.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.CurrentProductVersion">
            <summary>
            Current version of this MSBuild Engine assembly in the form, e.g, "12.0"
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.DefaultTargetsMarker">
            <summary>
            Symbol used in ProjectReferenceTarget items to represent default targets
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.ProjectReferenceTargetsOrDefaultTargetsMarker">
            <summary>
            Symbol used in ProjectReferenceTarget items to represent targets specified on the ProjectReference item
            with fallback to default targets if the ProjectReference item has no targets specified.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.PropertyNames.IsGraphBuild">
            <summary>
            Specifies whether the current evaluation / build is happening during a graph build
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.ItemTypeNames.ProjectReference">
            <summary>
            References to other msbuild projects
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.ItemTypeNames.ProjectReferenceTargets">
            <summary>
            Statically specifies what targets a project calls on its references
            </summary>
        </member>
        <member name="T:Microsoft.Build.Shared.ItemMetadataNames">
            <summary>
            Constants naming well-known item metadata.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Eventing.MSBuildEventSource">
            <summary>
            This captures information of how various key methods of building with MSBuild ran.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Eventing.MSBuildEventSource.Log">
            <summary>
            define the singleton instance of the event source
            </summary>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.ApplyLazyItemOperationsStart(System.String)">
            <summary>
            Call this method to notify listeners of information relevant to collecting a set of items, mutating them in a specified way, and saving the results.
            </summary>
            <param name="itemType">The type of the item being mutated.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.ApplyLazyItemOperationsStop(System.String)">
            <param name="itemType">The type of the item being mutated.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.BuildStart">
            <summary>
            Call this method to notify listeners of information relevant to the setup for a BuildManager to receive build requests.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.BuildProjectStart(System.String)">
            <summary>
            Call this method to notify listeners of information of how a project file built.
            <param name="projectPath">Filename of the project being built.</param>
            </summary>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.BuildProjectStop(System.String,System.String)">
            <param name="projectPath">Filename of the project being built.</param>
            <param name="targets">Names of the targets that built.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.EvaluateConditionStart(System.String)">
            <param name="condition">The condition being evaluated.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.EvaluateConditionStop(System.String,System.Boolean)">
            <param name="condition">The condition being evaluated.</param>
            <param name="result">The result of evaluating the condition.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.EvaluateStart(System.String)">
            <summary>
            Call this method to notify listeners of how the project data was evaluated.
            </summary>
            <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.EvaluatePass0Start(System.String)">
            <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.EvaluatePass0Stop(System.String)">
            <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.EvaluatePass1Start(System.String)">
            <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.EvaluatePass1Stop(System.String)">
            <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.EvaluatePass2Start(System.String)">
            <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.EvaluatePass2Stop(System.String)">
            <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.EvaluatePass3Start(System.String)">
            <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.EvaluatePass3Stop(System.String)">
            <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.EvaluatePass4Start(System.String)">
            <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.EvaluatePass4Stop(System.String)">
            <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.EvaluatePass5Start(System.String)">
            <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.EvaluatePass5Stop(System.String)">
            <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.EvaluateStop(System.String)">
            <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.ExpandGlobStart(System.String,System.String,System.String)">
            <summary>
            Call this method to notify listeners of information relevant to identifying a list of files that correspond to an item with a wildcard.
            </summary>
            <param name="rootDirectory">Source of files to glob.</param>
            <param name="glob">Pattern, possibly with wildcard(s) to be expanded.</param>
            <param name="excludedPatterns">Patterns not to expand.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.ExpandGlobStop(System.String,System.String,System.String)">
            <param name="rootDirectory">Source of files to glob.</param>
            <param name="glob">Pattern, possibly with wildcard(s) to be expanded.</param>
            <param name="excludedPatterns">Patterns not to expand.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.LoadDocumentStart(System.String)">
            <summary>
            Call this method to notify listeners of timing related to loading an XmlDocumentWithLocation from a path.
            <param name="fullPath">Path to the document to load.</param>
            </summary>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.LoadDocumentStop(System.String)">
            <param name="fullPath">Path to the document to load.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.ParseStart(System.String)">
            <summary>
            Call this method to notify listeners of profiling for the function that parses an XML document into a ProjectRootElement.
            </summary>
            <param name="projectFileName">Relevant information about where in the run of the progam it is.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.ParseStop(System.String)">
            <param name="projectFileName">Relevant information about where in the run of the progam it is.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.RarRemoveReferencesMarkedForExclusionStart">
            <summary>
            Call this method to notify listeners of profiling for the method that removes blacklisted references from the reference table. It puts primary and dependency references in invalid file lists.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.SaveStart(System.String)">
            <param name="fileLocation">Project file's location.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.SaveStop(System.String)">
            <param name="fileLocation">Project file's location.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Build.Eventing.MSBuildEventSource.TargetStart(System.String)" -->
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.TargetStop(System.String)">
            <param name="targetName">The name of the target being executed.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.MSBuildExeStart(System.String)">
            <summary>
            Call this method to notify listeners of the start of a build as called from the command line.
            </summary>
            <param name="commandLine">The command line used to run MSBuild.</param>
        </member>
        <member name="M:Microsoft.Build.Eventing.MSBuildEventSource.MSBuildExeStop(System.String)">
            <param name="commandLine">The command line used to run MSBuild.</param>
        </member>
    </members>
</doc>
