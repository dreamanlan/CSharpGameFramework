require "cs2lua__namespaces"; 

Track2Trigger = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		local __cs2dsl_newobj;
		__cs2dsl_newobj = newobject(Track2Trigger, nil, nil, "ctor", 0, nil, ...);
		return __cs2dsl_newobj;
	end,

	cctor = function()
		Track2Trigger.__cctor();
	end,

	__cctor = function()
		if Track2Trigger.__cctor_called then 
			return;
		else
			Track2Trigger.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__attributes = Track2Trigger__Attrs,
	__cctor_called = false,

	-------------------------------
	------ instance methods -------
	-------------------------------
	SetProxy = function(this, triggerProxy)
		this.m_TriggerProxy = triggerProxy;
	end,

	Clone = function(this)
		local __method_ret_16_4_25_5;
		local triger;
		triger = newobject(Track2Trigger, nil, nil, "ctor", 0, nil);
		triger.m_TrackBone:CopyFrom(this.m_TrackBone);
		triger.m_Duration:CopyFrom(this.m_Duration);
		triger.m_DamageInterval:CopyFrom(this.m_DamageInterval);
		triger.m_BulletRadius = this.m_BulletRadius;
		triger.m_BulletRadiusSquare = this.m_BulletRadiusSquare;
		__method_ret_16_4_25_5 = triger;
		return __method_ret_16_4_25_5;
	end,

	Reset = function(this)
		local __cs2lua_func_info = luainitialize();
		luapcall(Track2Trigger.__ori_Reset, this, __cs2lua_func_info);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori_Reset = function(this, __cs2lua_func_info)
		this.m_IsStarted = false;
		this.m_Effect = nil;
		this.m_BoneTransform = nil;
		this.m_Lifetime = 0;
		this.m_IsHit = false;
		local __old_val_34_8_34_32;
		__old_val_34_8_34_32 = this.m_LastPos;
		this.m_LastPos = get_vector3_zero(__cs2lua_func_info);
		local __new_val_34_8_34_32;
		__new_val_34_8_34_32 = this.m_LastPos;
		recycle_and_keep_vector3(__cs2lua_func_info, UnityEngine.Vector3, __old_val_34_8_34_32, __new_val_34_8_34_32);
		this.m_LastTime = 0.00000000;
	end,

	Execute = function(this, sender, instance, delta, curSectionTime)
		local __cs2lua_func_info = luainitialize();
		local __retval_0, __retval_1 = luapcall(Track2Trigger.__ori_Execute, this, __cs2lua_func_info, sender, instance, delta, curSectionTime);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
		if not __retval_0 then
			lualog("{0}", __retval_1);
			__retval_1 = false;
		end;
		return __retval_1;
	end,
	__ori_Execute = function(this, __cs2lua_func_info, sender, instance, delta, curSectionTime)
		local __method_ret_37_4_182_5;
		local senderObj;
		senderObj = typeas(sender, GameFramework.Skill.GfxSkillSenderInfo, TypeKind.Class);
		if isequal(nil, senderObj) then 
			__method_ret_37_4_182_5 = false;
			return __method_ret_37_4_182_5;
		end;
		if (senderObj.ConfigData.type == 0) then 
			__method_ret_37_4_182_5 = false;
			return __method_ret_37_4_182_5;
			--track只能在impact或buff里使用
		end;
		local obj;
		obj = senderObj.GfxObj;
		if invokeexternoperator(System.Boolean, UnityEngine.Object, "op_Inequality", nil, obj) then 
			if (curSectionTime >= this.m_TriggerProxy.StartTime) then 
				if (not this.m_IsStarted) then 
					this.m_IsStarted = true;
					local dest;
					local trackBone;
					trackBone = this.m_TrackBone:Get(instance);
					this.m_BoneTransform = GameFramework.Utility.FindChildRecursive(obj.transform, trackBone);
					if invokeexternoperator(System.Boolean, UnityEngine.Object, "op_Inequality", nil, this.m_BoneTransform) then 
						dest = get_tranform_position(__cs2lua_func_info, this.m_BoneTransform);
					else
						dest = get_tranform_position(__cs2lua_func_info, obj.transform);
						dest.y = (dest.y + 1.50000000);
						GameFramework.LogSystem.Warn(luastrtocsstr("[skill:{0} dsl skill id:{1}] trackbullet bone {2} can\'t find."), senderObj.SkillId, instance.DslSkillId, trackBone);
					end;
					local __old_val_62_20_62_133;
					__old_val_62_20_62_133 = this.m_StartPos;
					this.m_StartPos = callexterninstancereturnstruct(GameFramework.EntityController.Instance, GameFramework.EntityController, "GetImpactSenderPosition", senderObj.ObjId, senderObj.SkillId, senderObj.Seq);
					local __new_val_62_20_62_133;
					__new_val_62_20_62_133 = this.m_StartPos;
					recycle_and_keep_vector3(__cs2lua_func_info, UnityEngine.Vector3, __old_val_62_20_62_133, __new_val_62_20_62_133);
					local speedObj;
					--
					local __invoke_64_24_64_81;
					__invoke_64_24_64_81,speedObj = instance.Variables:TryGetValue(luastrtocsstr("emitSpeed"), __cs2lua_out);
					if __invoke_64_24_64_81 then

						this.m_Speed = typecast(speedObj, System.Single, TypeKind.Structure);
					else
						__method_ret_37_4_182_5 = false;
						return __method_ret_37_4_182_5;
					end;
					local duration;
					duration = this.m_Duration:Get(instance);
					this.m_Lifetime = (duration / 1000.00000000);
					if (GameFramework.Geometry.DistanceSquare__Single__Single__Single__Single(this.m_StartPos.x, this.m_StartPos.z, dest.x, dest.z) > 0.01000000) then 
						local __old_val_72_24_72_99;
						__old_val_72_24_72_99 = this.m_TargetPos;
						this.m_TargetPos = callexternstaticreturnstruct(GameFramework.Utility, "FrontOfTarget", wrap_vector3(__cs2lua_func_info, dest), wrap_vector3(__cs2lua_func_info, this.m_StartPos), (this.m_Speed * this.m_Lifetime));
						local __new_val_72_24_72_99;
						__new_val_72_24_72_99 = this.m_TargetPos;
						recycle_and_keep_vector3(__cs2lua_func_info, UnityEngine.Vector3, __old_val_72_24_72_99, __new_val_72_24_72_99);
					else
						local __old_val_74_24_74_94;
						__old_val_74_24_74_94 = this.m_TargetPos;
						this.m_TargetPos = call_transform_transformpoint_xyz(__cs2lua_func_info, obj.transform, 0, 0, (this.m_Speed * this.m_Lifetime));
						local __new_val_74_24_74_94;
						__new_val_74_24_74_94 = this.m_TargetPos;
						recycle_and_keep_vector3(__cs2lua_func_info, UnityEngine.Vector3, __old_val_74_24_74_94, __new_val_74_24_74_94);
					end;
					local newSectionDuration;
					newSectionDuration = (this.m_TriggerProxy.StartTime + typecast(((this.m_Lifetime * 1000)), System.Int64, TypeKind.Structure));
					if (instance.CurSectionDuration < newSectionDuration) then 
						instance:SetCurSectionDuration(newSectionDuration);
					end;
					local dir;
					local dirObj;
					--
					local __invoke_83_24_83_77;
					__invoke_83_24_83_77,dirObj = instance.Variables:TryGetValue(luastrtocsstr("emitDir"), __cs2lua_out);
					if __invoke_83_24_83_77 then

						dir = typecast(dirObj, UnityEngine.Quaternion, TypeKind.Structure);
					else
						dir = get_quaternion_identity(__cs2lua_func_info);
					end;
					local scale;
					local scaleObj;
					--
					local __invoke_90_24_90_81;
					__invoke_90_24_90_81,scaleObj = instance.Variables:TryGetValue(luastrtocsstr("emitScale"), __cs2lua_out);
					if __invoke_90_24_90_81 then

						scale = typecast(scaleObj, UnityEngine.Vector3, TypeKind.Structure);
					else
						scale = get_vector3_one(__cs2lua_func_info);
					end;
					local lookDir;
					lookDir = invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Vector3, UnityEngine.Vector3, "op_Subtraction", wrap_vector3(__cs2lua_func_info, dest), wrap_vector3(__cs2lua_func_info, this.m_StartPos));
					local q;
					q = call_quaternion_lookrotation(__cs2lua_func_info, wrap_vector3(__cs2lua_func_info, lookDir));
					local __old_val_97_20_97_122;
					__old_val_97_20_97_122 = this.m_ControlPos;
					this.m_ControlPos = invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Vector3, UnityEngine.Vector3, "op_Addition", wrap_vector3(__cs2lua_func_info, this.m_StartPos), callexternstaticreturnstruct(UnityEngine.Vector3, "Scale", invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Vector3, UnityEngine.Quaternion, "op_Multiply__Quaternion__Vector3", invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Quaternion, UnityEngine.Quaternion, "op_Multiply__Quaternion__Quaternion", wrap_quaternion(__cs2lua_func_info, q), wrap_quaternion(__cs2lua_func_info, dir)), get_vector3_forward(__cs2lua_func_info)), invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Vector3, UnityEngine.Vector3, "op_Multiply__Vector3__Single", invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Vector3, UnityEngine.Vector3, "op_Multiply__Vector3__Single", wrap_vector3(__cs2lua_func_info, scale), lookDir.magnitude), 0.50000000)));
					local __new_val_97_20_97_122;
					__new_val_97_20_97_122 = this.m_ControlPos;
					recycle_and_keep_vector3(__cs2lua_func_info, UnityEngine.Vector3, __old_val_97_20_97_122, __new_val_97_20_97_122);
					local effectPath;
					effectPath = SkillSystem.SkillParamUtility.RefixResourceVariable(luastrtocsstr("emitEffect"), instance, senderObj.ConfigData.resources);
					this.m_Effect = typeas(GameFramework.ResourceSystem.Instance:NewObject__String__Single(effectPath, this.m_Lifetime), UnityEngine.GameObject, TypeKind.Class);
					if invokeexternoperator(System.Boolean, UnityEngine.Object, "op_Inequality", nil, this.m_Effect) then 
						senderObj.TrackEffectObj = this.m_Effect;
						GameFramework.Skill.Trigers.TriggerUtil.SetObjVisible(this.m_Effect, true);
						this.m_Effect:SetActive(false);
						this.m_Effect.transform.position = this.m_StartPos;
						this.m_Effect.transform.localRotation = q;
						this.m_Effect:SetActive(true);
						local em;
						em = instance.CustomDatas:GetData__Type(GameFramework.Skill.Trigers.EffectManager);
						if isequal(em, nil) then 
							em = newexternobject(GameFramework.Skill.Trigers.EffectManager, nil, nil, "ctor", 0, nil);
							instance.CustomDatas:AddData__Type__Object(GameFramework.Skill.Trigers.EffectManager, em);
						end;
						em:AddEffect(this.m_Effect);
						em:SetParticleSpeed(instance.EffectScale);
					else
						if System.String.IsNullOrEmpty(effectPath) then 
							GameFramework.LogSystem.Warn(luastrtocsstr("[skill:{0} dsl skill id:{1}] trackbullet effect is empty."), senderObj.SkillId, instance.DslSkillId);
						else
							GameFramework.LogSystem.Warn(luastrtocsstr("[skill:{0} dsl skill id:{1}] trackbullet effect {2} can\'t find."), senderObj.SkillId, instance.DslSkillId, effectPath);
						end;
					end;
				elseif invokeexternoperator(System.Boolean, UnityEngine.Object, "op_Inequality", nil, this.m_Effect) then 
					local dest;
					if invokeexternoperator(System.Boolean, UnityEngine.Object, "op_Inequality", nil, this.m_BoneTransform) then 
						dest = get_tranform_position(__cs2lua_func_info, this.m_BoneTransform);
					else
						dest = get_tranform_position(__cs2lua_func_info, obj.transform);
						dest.y = (dest.y + 1.50000000);
					end;
					dest = callexternstaticreturnstruct(GameFramework.Utility, "FrontOfTarget", wrap_vector3(__cs2lua_func_info, this.m_StartPos), wrap_vector3(__cs2lua_func_info, dest), 0.10000000);
					--m_Effect.transform.position = Vector3.MoveTowards(m_Effect.transform.position, m_TargetPos, m_RealSpeed * Time.deltaTime);
					this.m_Effect.transform.position = callexternstaticreturnstruct(GameFramework.Utility, "GetBezierPoint", wrap_vector3(__cs2lua_func_info, this.m_StartPos), wrap_vector3(__cs2lua_func_info, this.m_ControlPos), wrap_vector3(__cs2lua_func_info, this.m_TargetPos), ((((curSectionTime - this.m_TriggerProxy.StartTime)) / 1000.00000000) / this.m_Lifetime));
					local pos;
					pos = get_tranform_position(__cs2lua_func_info, this.m_Effect.transform);
					if (not this.m_IsHit) then 
						local distSqr;
						distSqr = 340282300000000000000000000000000000000.00000000;
						if (this.m_LastPos.sqrMagnitude > 0.00010000) then 
							local np;
							local targetPos;
							targetPos = newexternstruct(ScriptRuntime.Vector2, nil, nil, "ctor__Single__Single", 0, nil, dest.x, dest.z);
							local lastPos;
							lastPos = newexternstruct(ScriptRuntime.Vector2, nil, nil, "ctor__Single__Single", 0, nil, this.m_LastPos.x, this.m_LastPos.z);
							distSqr,np = GameFramework.Geometry.PointToLineSegmentDistanceSquare__Vector2__Vector2__Vector2__O_Vector2(wrapexternstructargument(targetPos, ScriptRuntime.Vector2, OperationKind.LocalReference, SymbolKind.Local), wrapexternstructargument(lastPos, ScriptRuntime.Vector2, OperationKind.LocalReference, SymbolKind.Local), newexternstruct(ScriptRuntime.Vector2, nil, nil, "ctor__Single__Single", 0, nil, pos.x, pos.z), __cs2lua_out);
							np = wrapexternstruct(np, ScriptRuntime.Vector2);
						else
							distSqr = (invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Vector3, UnityEngine.Vector3, "op_Subtraction", wrap_vector3(__cs2lua_func_info, dest), wrap_vector3(__cs2lua_func_info, pos))).sqrMagnitude;
						end;
						local __old_val_144_24_144_39;
						__old_val_144_24_144_39 = this.m_LastPos;
						this.m_LastPos = pos;
						this.m_LastPos = wrap_vector3(__cs2lua_func_info, this.m_LastPos);
						local __new_val_144_24_144_39;
						__new_val_144_24_144_39 = this.m_LastPos;
						recycle_and_keep_vector3(__cs2lua_func_info, UnityEngine.Vector3, __old_val_144_24_144_39, __new_val_144_24_144_39);
						if (distSqr <= this.m_BulletRadiusSquare) then 
							local curTime;
							curTime = UnityEngine.Time.time;
							local interval;
							interval = (this.m_DamageInterval:Get(instance) / 1000.00000000);
							if ((this.m_LastTime + interval) <= curTime) then 
								this.m_LastTime = curTime;
								local __old_val_151_32_151_96;
								__old_val_151_32_151_96 = this.m_HitEffectRotation;
								this.m_HitEffectRotation = call_quaternion_lookrotation(__cs2lua_func_info, invokeexternoperatorreturnstructimpl(__cs2lua_func_info, UnityEngine.Vector3, UnityEngine.Vector3, "op_Subtraction", wrap_vector3(__cs2lua_func_info, this.m_StartPos), wrap_vector3(__cs2lua_func_info, dest)));
								local __new_val_151_32_151_96;
								__new_val_151_32_151_96 = this.m_HitEffectRotation;
								recycle_and_keep_quaternion(__cs2lua_func_info, UnityEngine.Quaternion, __old_val_151_32_151_96, __new_val_151_32_151_96);
								local impactId;
								impactId = GameFramework.Skill.Trigers.TriggerUtil.GetSkillImpactId(instance.Variables, senderObj.ConfigData);
								local args;
								args = GameFramework.Skill.Trigers.TriggerUtil.CalcImpactConfig(0, impactId, instance, senderObj.ConfigData, __cs2lua_out);
								if args:ContainsKey(luastrtocsstr("hitEffectRotation")) then 
									args[luastrtocsstr("hitEffectRotation")] = this.m_HitEffectRotation;
								else
									args:Add(luastrtocsstr("hitEffectRotation"), this.m_HitEffectRotation);
								end;
								GameFramework.EntityController.Instance:TrackSendImpact(senderObj.ObjId, senderObj.SkillId, senderObj.Seq, impactId, args);
								--m_IsHit = true;
							end;
						end;
					end;
					if (curSectionTime > (this.m_TriggerProxy.StartTime + (this.m_Lifetime * 1000))) then 
						this.m_Effect:SetActive(false);
						GameFramework.ResourceSystem.Instance:RecycleObject(this.m_Effect);
						this.m_Effect = nil;
						instance:StopCurSection();
						__method_ret_37_4_182_5 = false;
						return __method_ret_37_4_182_5;
					end;
				else
					__method_ret_37_4_182_5 = false;
					return __method_ret_37_4_182_5;
				end;
				__method_ret_37_4_182_5 = true;
				return __method_ret_37_4_182_5;
			else
				__method_ret_37_4_182_5 = true;
				return __method_ret_37_4_182_5;
			end;
		else
			instance:StopCurSection();
			__method_ret_37_4_182_5 = false;
			return __method_ret_37_4_182_5;
		end;
		return nil;
	end,

	OnInitProperties = function(this)
		this.m_TriggerProxy:AddProperty(luastrtocsstr("TrackBone"), function()
			local __method_ret_185_48_185_91;
			__method_ret_185_48_185_91 = this.m_TrackBone.EditableValue;
			return __method_ret_185_48_185_91;
		end, function(val)
			this.m_TrackBone.EditableValue = val;
		end);
		this.m_TriggerProxy:AddProperty(luastrtocsstr("Duration"), function()
			local __method_ret_186_47_186_89;
			__method_ret_186_47_186_89 = this.m_Duration.EditableValue;
			return __method_ret_186_47_186_89;
		end, function(val)
			this.m_Duration.EditableValue = val;
		end);
	end,

	LoadCallData = function(this, callData, instance)
		local num;
		num = callData:GetParamNum();
		if (num > 0) then 
			this.m_TrackBone:Set__ISyntaxComponent(callData:GetParam(0));
		end;
		if (num > 1) then 
			this.m_Duration:Set__ISyntaxComponent(callData:GetParam(1));
		end;
		if (num > 2) then 
			this.m_DamageInterval:Set__ISyntaxComponent(callData:GetParam(2));
		end;
		if (num > 3) then 
			this.m_BulletRadius = System.Single.Parse__String(callData:GetParamId(3));
			this.m_BulletRadiusSquare = (this.m_BulletRadius * this.m_BulletRadius);
		end;
		if (num > 4) then 
			this.m_TriggerProxy.StartTime = System.Int64.Parse__String(callData:GetParamId(4));
		end;
	end,

	ctor = function(this)
		Track2Trigger.__ctor(this);
	end,

	__ctor = function(this)
		local __cs2lua_func_info = luainitialize();
		luapcall(Track2Trigger.__ori___ctor, this, __cs2lua_func_info);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori___ctor = function(this, __cs2lua_func_info)
		if this.__ctor_called then 
			return;
		else
			this.__ctor_called = true;
		end;
		this.m_TrackBone = newexternobject(SkillSystem.SkillStringParam, nil, nil, "ctor", 0, nil);
		this.m_Duration = newexternobject(SkillSystem.SkillLongParam, nil, nil, "ctor", 0, nil);
		this.m_DamageInterval = newexternobject(SkillSystem.SkillLongParam, nil, nil, "ctor", 0, nil);
		this.m_StartPos = get_vector3_zero(__cs2lua_func_info);
		recycle_and_keep_vector3(__cs2lua_func_info, UnityEngine.Vector3, nil, this.m_StartPos);
		this.m_ControlPos = get_vector3_zero(__cs2lua_func_info);
		recycle_and_keep_vector3(__cs2lua_func_info, UnityEngine.Vector3, nil, this.m_ControlPos);
		this.m_TargetPos = get_vector3_zero(__cs2lua_func_info);
		recycle_and_keep_vector3(__cs2lua_func_info, UnityEngine.Vector3, nil, this.m_TargetPos);
		this.m_LastPos = get_vector3_zero(__cs2lua_func_info);
		recycle_and_keep_vector3(__cs2lua_func_info, UnityEngine.Vector3, nil, this.m_LastPos);
		this.m_HitEffectRotation = new_quaternion(__cs2lua_func_info, nil);
		recycle_and_keep_quaternion(__cs2lua_func_info, UnityEngine.Quaternion, nil, this.m_HitEffectRotation);
	end,
	-------------------------------
	------ instance fields -------
	-------------------------------
	__init_obj_fields = function(this)
		rawset(this, "m_BulletRadius", 0.10000000);
		rawset(this, "m_BulletRadiusSquare", 0.01000000);
		rawset(this, "m_LastTime", 0.00000000);
		rawset(this, "m_Speed", 10.00000000);
		rawset(this, "m_Lifetime", 1.00000000);
		rawset(this, "m_IsStarted", false);
		rawset(this, "m_IsHit", false);
		rawset(this, "__attributes", Track2Trigger__Attrs);
		rawset(this, "__ctor_called", false);
	end,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("Track2Trigger::__define_class begin");

		local class = Track2Trigger;
		local obj_methods = {
			SetProxy = rawget(class, "SetProxy"),
			Clone = rawget(class, "Clone"),
			Reset = rawget(class, "Reset"),
			Execute = rawget(class, "Execute"),
			OnInitProperties = rawget(class, "OnInitProperties"),
			LoadCallData = rawget(class, "LoadCallData"),
			ctor = rawget(class, "ctor"),
			__ctor = rawget(class, "__ctor"),
		};
		local tmp_obj_method = nil;

		local __defineclass_return = defineclass(nil, "Track2Trigger", "Track2Trigger", class, obj_methods, false, false);
		Utility.Warn("Track2Trigger::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		__attributes = true,
		__cctor_called = true,
	},

	__obj_fields = {
		m_TrackBone = true,
		m_Duration = true,
		m_DamageInterval = true,
		m_BulletRadius = true,
		m_BulletRadiusSquare = true,
		m_StartPos = true,
		m_ControlPos = true,
		m_TargetPos = true,
		m_LastPos = true,
		m_LastTime = true,
		m_Speed = true,
		m_Lifetime = true,
		m_IsStarted = true,
		m_HitEffectRotation = true,
		m_Effect = true,
		m_BoneTransform = true,
		m_IsHit = true,
		m_TriggerProxy = true,
		__attributes = true,
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__interfaces = {
		"GameFramework.Plugin.ISkillTriggerPlugin",
	},
	__method_info = {
		ctor = {
			ctor = true,
		},
	},
};


require "cs2lua__syslib";
require "cs2lua__attributes";
require "cs2lua__externenums";
require "cs2lua__interfaces";
settempmetatable(Track2Trigger);
